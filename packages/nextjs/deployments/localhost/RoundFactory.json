{
  "address": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "alloSettings",
          "type": "address"
        }
      ],
      "name": "AlloSettingsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "roundAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownedBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "roundImplementation",
          "type": "address"
        }
      ],
      "name": "RoundCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "roundImplementation",
          "type": "address"
        }
      ],
      "name": "RoundImplementationUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "alloSettings",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encodedParameters",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "ownedBy",
          "type": "address"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAlloSettings",
          "type": "address"
        }
      ],
      "name": "updateAlloSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newRoundImplementation",
          "type": "address"
        }
      ],
      "name": "updateRoundImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fddca32b0711e18bfebf25fef4d3b7acb5629e50b9b4eed09a8e4dd7edc96aa",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3Aa5ebB10DC797CAC828524e59A333d0A371443c",
    "transactionIndex": 0,
    "gasUsed": "588812",
    "logsBloom": "0x
    "blockHash": "0x3fc12fac6085861c6458786a87849707f7c93920773cb37eb9cdb03df662aef3",
    "transactionHash": "0x1fddca32b0711e18bfebf25fef4d3b7acb5629e50b9b4eed09a8e4dd7edc96aa",
    "logs": [],
    "blockNumber": 30,
    "cumulativeGasUsed": "588812",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c921f1417ace463d64cfccd1853f0d26",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"alloSettings\",\"type\":\"address\"}],\"name\":\"AlloSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"roundAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"roundImplementation\",\"type\":\"address\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roundImplementation\",\"type\":\"address\"}],\"name\":\"RoundImplementationUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alloSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedParameters\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"ownedBy\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAlloSettings\",\"type\":\"address\"}],\"name\":\"updateAlloSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newRoundImplementation\",\"type\":\"address\"}],\"name\":\"updateRoundImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"RoundFactory is deployed once per chain and stores a reference to the deployed RoundImplementation.RoundFactory uses openzeppelin Clones to reduce deploy costs and also allows upgrading RoundImplementationUpdated.This contract is Ownable thus supports ownership transfership\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"create(bytes,address)\":{\"params\":{\"encodedParameters\":\"Encoded parameters for creating a round\",\"ownedBy\":\"Program which created the contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAlloSettings(address)\":{\"params\":{\"newAlloSettings\":\"New allo settings contract address\"}},\"updateRoundImplementation(address)\":{\"params\":{\"newRoundImplementation\":\"New RoundImplementation contract address\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AlloSettingsUpdated(address)\":{\"notice\":\"Emitted when allo settings contract is updated\"},\"RoundCreated(address,address,address)\":{\"notice\":\"Emitted when a new Round is created\"},\"RoundImplementationUpdated(address)\":{\"notice\":\"Emitted when a Round implementation contract is updated\"}},\"kind\":\"user\",\"methods\":{\"alloSettings()\":{\"notice\":\"Address of the Allo settings contract\"},\"create(bytes,address)\":{\"notice\":\"Clones RoundImplementation a new round and emits event\"},\"initialize()\":{\"notice\":\"constructor function which ensure deployer is set as owner\"},\"nonce()\":{\"notice\":\"Nonce used to generate deterministic salt for Clones\"},\"roundImplementation()\":{\"notice\":\"Address of the RoundImplementation contract\"},\"updateAlloSettings(address)\":{\"notice\":\"Allows the owner to update the allo settings contract.\"},\"updateRoundImplementation(address)\":{\"notice\":\"Allows the owner to update the RoundImplementation. This provides us the flexibility to upgrade RoundImplementation contract while relying on the same RoundFactory to get the list of rounds.\"}},\"notice\":\"Invoked by a RoundOperator to enable creation of a round by cloning the RoundImplementation contract. The factory contract emits an event anytime a round is created which can be used to derive the round registry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/round/RoundFactory.sol\":\"RoundFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x3d98edeb5d5be8410fca707b73dabe7544d1dd11e35b73dd907c473fe43cc3ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/round/IRoundFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRoundFactory {\\r\\n    function initialize() external;\\r\\n\\r\\n    function updateAlloSettings(address newAlloSettings) external;\\r\\n\\r\\n    function updateRoundImplementation(\\r\\n        address payable newRoundImplementation\\r\\n    ) external;\\r\\n\\r\\n    function create(\\r\\n        bytes calldata encodedParameters,\\r\\n        address ownedBy\\r\\n    ) external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xe8933dc9d909b47b5e03e243891470a4cba53de632a32fc5c6a40b5137676e08\",\"license\":\"AGPL-3.0-only\"},\"contracts/round/IRoundImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/MetaPtr.sol\\\";\\r\\n\\r\\ninterface IRoundImplementation {\\r\\n    struct ApplicationStatus {\\r\\n        uint256 index;\\r\\n        uint256 statusRow;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        bytes calldata encodedParameters,\\r\\n        address _alloSettings\\r\\n    ) external;\\r\\n\\r\\n    function updateMatchAmount(uint256 newAmount) external;\\r\\n\\r\\n    function updateRoundFeePercentage(uint32 newFeePercentage) external;\\r\\n\\r\\n    function updateRoundFeeAddress(address payable newFeeAddress) external;\\r\\n\\r\\n    function updateRoundMetaPtr(MetaPtr memory newRoundMetaPtr) external;\\r\\n\\r\\n    function updateApplicationMetaPtr(\\r\\n        MetaPtr memory newApplicationMetaPtr\\r\\n    ) external;\\r\\n\\r\\n    function updateStartAndEndTimes(\\r\\n        uint256 newApplicationsStartTime,\\r\\n        uint256 newApplicationsEndTime,\\r\\n        uint256 newRoundStartTime,\\r\\n        uint256 newRoundEndTime\\r\\n    ) external;\\r\\n\\r\\n    function applyToRound(\\r\\n        bytes32 projectID,\\r\\n        MetaPtr calldata newApplicationMetaPtr\\r\\n    ) external;\\r\\n\\r\\n    function getApplicationIndexesByProjectID(\\r\\n        bytes32 projectID\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApplicationStatuses(\\r\\n        ApplicationStatus[] memory statuses\\r\\n    ) external;\\r\\n\\r\\n    function getApplicationStatus(\\r\\n        uint256 applicationIndex\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function vote(bytes[] memory encodedVotes) external payable;\\r\\n\\r\\n    function setReadyForPayout() external payable;\\r\\n\\r\\n    function withdraw(address tokenAddress, address payable recipent) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x424fa4d73314d5ed1ce110274796ba085b25d742a7f68ad72a2b77dd999c5044\",\"license\":\"AGPL-3.0-only\"},\"contracts/round/RoundFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IRoundFactory.sol\\\";\\r\\nimport \\\"./IRoundImplementation.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../utils/MetaPtr.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Invoked by a RoundOperator to enable creation of a\\r\\n * round by cloning the RoundImplementation contract.\\r\\n * The factory contract emits an event anytime a round is created\\r\\n * which can be used to derive the round registry.\\r\\n *\\r\\n * @dev RoundFactory is deployed once per chain and stores\\r\\n * a reference to the deployed RoundImplementation.\\r\\n * @dev RoundFactory uses openzeppelin Clones to reduce deploy\\r\\n * costs and also allows upgrading RoundImplementationUpdated.\\r\\n * @dev This contract is Ownable thus supports ownership transfership\\r\\n *\\r\\n */\\r\\ncontract RoundFactory is IRoundFactory, OwnableUpgradeable {\\r\\n  string public constant VERSION = \\\"0.2.0\\\";\\r\\n\\r\\n  // --- Data ---\\r\\n\\r\\n  /// @notice Address of the RoundImplementation contract\\r\\n  address public roundImplementation;\\r\\n\\r\\n  /// @notice Address of the Allo settings contract\\r\\n  address public alloSettings;\\r\\n\\r\\n  /// @notice Nonce used to generate deterministic salt for Clones\\r\\n  uint256 public nonce;\\r\\n\\r\\n  // --- Event ---\\r\\n\\r\\n  /// @notice Emitted when allo settings contract is updated\\r\\n  event AlloSettingsUpdated(address alloSettings);\\r\\n\\r\\n  /// @notice Emitted when a Round implementation contract is updated\\r\\n  event RoundImplementationUpdated(address roundImplementation);\\r\\n\\r\\n  /// @notice Emitted when a new Round is created\\r\\n  event RoundCreated(\\r\\n    address indexed roundAddress,\\r\\n    address indexed ownedBy,\\r\\n    address indexed roundImplementation\\r\\n  );\\r\\n\\r\\n  /// @notice constructor function which ensure deployer is set as owner\\r\\n  function initialize() external initializer {\\r\\n    __Context_init_unchained();\\r\\n    __Ownable_init_unchained();\\r\\n  }\\r\\n\\r\\n  // --- Core methods ---\\r\\n\\r\\n  /**\\r\\n   * @notice Allows the owner to update the allo settings contract.\\r\\n   *\\r\\n   * @param newAlloSettings New allo settings contract address\\r\\n   */\\r\\n  function updateAlloSettings(address newAlloSettings) external onlyOwner {\\r\\n    alloSettings = newAlloSettings;\\r\\n\\r\\n    emit AlloSettingsUpdated(alloSettings);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Allows the owner to update the RoundImplementation.\\r\\n   * This provides us the flexibility to upgrade RoundImplementation\\r\\n   * contract while relying on the same RoundFactory to get the list of\\r\\n   * rounds.\\r\\n   *\\r\\n   * @param newRoundImplementation New RoundImplementation contract address\\r\\n   */\\r\\n  function updateRoundImplementation(address payable newRoundImplementation) external onlyOwner {\\r\\n\\r\\n    require(newRoundImplementation != address(0), \\\"roundImplementation is 0x\\\");\\r\\n\\r\\n    roundImplementation = newRoundImplementation;\\r\\n\\r\\n    emit RoundImplementationUpdated(roundImplementation);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Clones RoundImplementation a new round and emits event\\r\\n   *\\r\\n   * @param encodedParameters Encoded parameters for creating a round\\r\\n   * @param ownedBy Program which created the contract\\r\\n   */\\r\\n  function create(\\r\\n    bytes calldata encodedParameters,\\r\\n    address ownedBy\\r\\n  ) external returns (address) {\\r\\n\\r\\n    nonce++;\\r\\n\\r\\n    require(roundImplementation != address(0), \\\"roundImplementation is 0x\\\");\\r\\n    require(alloSettings != address(0), \\\"alloSettings is 0x\\\");\\r\\n\\r\\n    bytes32 salt = keccak256(abi.encodePacked(msg.sender, nonce));\\r\\n    address clone = ClonesUpgradeable.cloneDeterministic(roundImplementation, salt);\\r\\n\\r\\n    emit RoundCreated(clone, ownedBy, payable(roundImplementation));\\r\\n\\r\\n    IRoundImplementation(payable(clone)).initialize(\\r\\n      encodedParameters,\\r\\n      alloSettings\\r\\n    );\\r\\n\\r\\n    return clone;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xfe90afb83b28577344ac1dfd8db51dd746d7ccfb211fe5e0e5801a8cf8fe5463\",\"license\":\"AGPL-3.0-only\"},\"contracts/utils/MetaPtr.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct MetaPtr {\\r\\n\\r\\n  /// @notice Protocol ID corresponding to a specific protocol.\\r\\n  /// More info at https://github.com/allo-protocol/contracts/tree/main/docs/MetaPtrProtocol.md\\r\\n  uint256 protocol;\\r\\n  \\r\\n  /// @notice Pointer to fetch metadata for the specified protocol\\r\\n  string pointer;\\r\\n}\",\"keccak256\":\"0x0c0282e30607fcfddcd64564c27a57f06453a110262c9d986b171d0ddffbc2ca\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109b0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a858643811610071578063a858643814610110578063affed0e014610123578063bc31bca91461013a578063be8c0b2f1461014d578063f2fde38b14610160578063ffa1ad741461017357600080fd5b80635614ea4e146100ae578063715018a6146100c35780638129fc1c146100cb5780638da5cb5b146100d35780639c3b68ce146100fd575b600080fd5b6100c16100bc3660046107d2565b6101a4565b005b6100c1610201565b6100c1610215565b6033546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6066546100e0906001600160a01b031681565b6065546100e0906001600160a01b031681565b61012c60675481565b6040519081526020016100f4565b6100e06101483660046107f6565b61032f565b6100c161015b3660046107d2565b6104f9565b6100c161016e3660046107d2565b6105a1565b610197604051806040016040528060058152602001640302e322e360dc1b81525081565b6040516100f49190610879565b6101ac610617565b606680546001600160a01b0319166001600160a01b0383169081179091556040519081527fa58967f5e07bd2405f0758a5019f9448cf74c83b2a4ce3bb0744f6d89a66157f906020015b60405180910390a150565b610209610617565b6102136000610671565b565b600054610100900460ff16158080156102355750600054600160ff909116105b8061024f5750303b15801561024f575060005460ff166001145b6102b75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156102da576000805461ff0019166101001790555b6102e26106c3565b6102ea6106ea565b801561032c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016101f6565b50565b6067805460009182610340836108c7565b90915550506065546001600160a01b03166103995760405162461bcd60e51b81526020600482015260196024820152780e4deeadcc892dae0d8cadacadce8c2e8d2dedc40d2e64060f603b1b60448201526064016102ae565b6066546001600160a01b03166103e65760405162461bcd60e51b81526020600482015260126024820152710c2d8d8dea6cae8e8d2dccee640d2e64060f60731b60448201526064016102ae565b6067546040516bffffffffffffffffffffffff193360601b166020820152603481019190915260009060540160408051601f198184030181529190528051602090910120606554909150600090610446906001600160a01b03168361071a565b6065546040519192506001600160a01b0390811691868216918416907f9ea0518c708ef5dfce96e410b66495be1d381b18199887003dd508e0cc19dc7790600090a460665460405163cce2df0360e01b81526001600160a01b038084169263cce2df03926104bd928b928b929116906004016108ee565b600060405180830381600087803b1580156104d757600080fd5b505af11580156104eb573d6000803e3d6000fd5b509298975050505050505050565b610501610617565b6001600160a01b0381166105535760405162461bcd60e51b81526020600482015260196024820152780e4deeadcc892dae0d8cadacadce8c2e8d2dedc40d2e64060f603b1b60448201526064016102ae565b606580546001600160a01b0319166001600160a01b0383169081179091556040519081527f80dfd4a16b3bbb75be7e2b6efaa25fff123212f0ca69500dd77518910aec82b5906020016101f6565b6105a9610617565b6001600160a01b03811661060e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ae565b61032c81610671565b6033546001600160a01b031633146102135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ae565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166102135760405162461bcd60e51b81526004016102ae9061092f565b600054610100900460ff166107115760405162461bcd60e51b81526004016102ae9061092f565b61021333610671565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f590506001600160a01b0381166107b75760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016102ae565b92915050565b6001600160a01b038116811461032c57600080fd5b6000602082840312156107e457600080fd5b81356107ef816107bd565b9392505050565b60008060006040848603121561080b57600080fd5b833567ffffffffffffffff8082111561082357600080fd5b818601915086601f83011261083757600080fd5b81358181111561084657600080fd5b87602082850101111561085857600080fd5b6020928301955093505084013561086e816107bd565b809150509250925092565b600060208083528351808285015260005b818110156108a65785810183015185820160400152820161088a565b506000604082860101526040601f19601f8301168501019250505092915050565b6000600182016108e757634e487b7160e01b600052601160045260246000fd5b5060010190565b6040815282604082015282846060830137600060608483018101919091526001600160a01b03929092166020820152601f909201601f191690910101919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220b772dfd05ef2c2b847966f2580220d1392691bf4171fe06354cd3a19b7b172c564736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a858643811610071578063a858643814610110578063affed0e014610123578063bc31bca91461013a578063be8c0b2f1461014d578063f2fde38b14610160578063ffa1ad741461017357600080fd5b80635614ea4e146100ae578063715018a6146100c35780638129fc1c146100cb5780638da5cb5b146100d35780639c3b68ce146100fd575b600080fd5b6100c16100bc3660046107d2565b6101a4565b005b6100c1610201565b6100c1610215565b6033546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6066546100e0906001600160a01b031681565b6065546100e0906001600160a01b031681565b61012c60675481565b6040519081526020016100f4565b6100e06101483660046107f6565b61032f565b6100c161015b3660046107d2565b6104f9565b6100c161016e3660046107d2565b6105a1565b610197604051806040016040528060058152602001640302e322e360dc1b81525081565b6040516100f49190610879565b6101ac610617565b606680546001600160a01b0319166001600160a01b0383169081179091556040519081527fa58967f5e07bd2405f0758a5019f9448cf74c83b2a4ce3bb0744f6d89a66157f906020015b60405180910390a150565b610209610617565b6102136000610671565b565b600054610100900460ff16158080156102355750600054600160ff909116105b8061024f5750303b15801561024f575060005460ff166001145b6102b75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156102da576000805461ff0019166101001790555b6102e26106c3565b6102ea6106ea565b801561032c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016101f6565b50565b6067805460009182610340836108c7565b90915550506065546001600160a01b03166103995760405162461bcd60e51b81526020600482015260196024820152780e4deeadcc892dae0d8cadacadce8c2e8d2dedc40d2e64060f603b1b60448201526064016102ae565b6066546001600160a01b03166103e65760405162461bcd60e51b81526020600482015260126024820152710c2d8d8dea6cae8e8d2dccee640d2e64060f60731b60448201526064016102ae565b6067546040516bffffffffffffffffffffffff193360601b166020820152603481019190915260009060540160408051601f198184030181529190528051602090910120606554909150600090610446906001600160a01b03168361071a565b6065546040519192506001600160a01b0390811691868216918416907f9ea0518c708ef5dfce96e410b66495be1d381b18199887003dd508e0cc19dc7790600090a460665460405163cce2df0360e01b81526001600160a01b038084169263cce2df03926104bd928b928b929116906004016108ee565b600060405180830381600087803b1580156104d757600080fd5b505af11580156104eb573d6000803e3d6000fd5b509298975050505050505050565b610501610617565b6001600160a01b0381166105535760405162461bcd60e51b81526020600482015260196024820152780e4deeadcc892dae0d8cadacadce8c2e8d2dedc40d2e64060f603b1b60448201526064016102ae565b606580546001600160a01b0319166001600160a01b0383169081179091556040519081527f80dfd4a16b3bbb75be7e2b6efaa25fff123212f0ca69500dd77518910aec82b5906020016101f6565b6105a9610617565b6001600160a01b03811661060e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ae565b61032c81610671565b6033546001600160a01b031633146102135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ae565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166102135760405162461bcd60e51b81526004016102ae9061092f565b600054610100900460ff166107115760405162461bcd60e51b81526004016102ae9061092f565b61021333610671565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b1760205281603760096000f590506001600160a01b0381166107b75760405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016102ae565b92915050565b6001600160a01b038116811461032c57600080fd5b6000602082840312156107e457600080fd5b81356107ef816107bd565b9392505050565b60008060006040848603121561080b57600080fd5b833567ffffffffffffffff8082111561082357600080fd5b818601915086601f83011261083757600080fd5b81358181111561084657600080fd5b87602082850101111561085857600080fd5b6020928301955093505084013561086e816107bd565b809150509250925092565b600060208083528351808285015260005b818110156108a65785810183015185820160400152820161088a565b506000604082860101526040601f19601f8301168501019250505092915050565b6000600182016108e757634e487b7160e01b600052601160045260246000fd5b5060010190565b6040815282604082015282846060830137600060608483018101919091526001600160a01b03929092166020820152601f909201601f191690910101919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220b772dfd05ef2c2b847966f2580220d1392691bf4171fe06354cd3a19b7b172c564736f6c63430008130033",
  "devdoc": {
    "details": "RoundFactory is deployed once per chain and stores a reference to the deployed RoundImplementation.RoundFactory uses openzeppelin Clones to reduce deploy costs and also allows upgrading RoundImplementationUpdated.This contract is Ownable thus supports ownership transfership",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "create(bytes,address)": {
        "params": {
          "encodedParameters": "Encoded parameters for creating a round",
          "ownedBy": "Program which created the contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAlloSettings(address)": {
        "params": {
          "newAlloSettings": "New allo settings contract address"
        }
      },
      "updateRoundImplementation(address)": {
        "params": {
          "newRoundImplementation": "New RoundImplementation contract address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AlloSettingsUpdated(address)": {
        "notice": "Emitted when allo settings contract is updated"
      },
      "RoundCreated(address,address,address)": {
        "notice": "Emitted when a new Round is created"
      },
      "RoundImplementationUpdated(address)": {
        "notice": "Emitted when a Round implementation contract is updated"
      }
    },
    "kind": "user",
    "methods": {
      "alloSettings()": {
        "notice": "Address of the Allo settings contract"
      },
      "create(bytes,address)": {
        "notice": "Clones RoundImplementation a new round and emits event"
      },
      "initialize()": {
        "notice": "constructor function which ensure deployer is set as owner"
      },
      "nonce()": {
        "notice": "Nonce used to generate deterministic salt for Clones"
      },
      "roundImplementation()": {
        "notice": "Address of the RoundImplementation contract"
      },
      "updateAlloSettings(address)": {
        "notice": "Allows the owner to update the allo settings contract."
      },
      "updateRoundImplementation(address)": {
        "notice": "Allows the owner to update the RoundImplementation. This provides us the flexibility to upgrade RoundImplementation contract while relying on the same RoundFactory to get the list of rounds."
      }
    },
    "notice": "Invoked by a RoundOperator to enable creation of a round by cloning the RoundImplementation contract. The factory contract emits an event anytime a round is created which can be used to derive the round registry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 800,
        "contract": "contracts/round/RoundFactory.sol:RoundFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 803,
        "contract": "contracts/round/RoundFactory.sol:RoundFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1917,
        "contract": "contracts/round/RoundFactory.sol:RoundFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 592,
        "contract": "contracts/round/RoundFactory.sol:RoundFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 712,
        "contract": "contracts/round/RoundFactory.sol:RoundFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9798,
        "contract": "contracts/round/RoundFactory.sol:RoundFactory",
        "label": "roundImplementation",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 9801,
        "contract": "contracts/round/RoundFactory.sol:RoundFactory",
        "label": "alloSettings",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 9804,
        "contract": "contracts/round/RoundFactory.sol:RoundFactory",
        "label": "nonce",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}