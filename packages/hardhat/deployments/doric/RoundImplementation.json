{
  "address": "0xaaE261E5b7694de09C1F4136D4a0b360EE321bd7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaPtr",
          "name": "oldMetaPtr",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaPtr",
          "name": "newMetaPtr",
          "type": "tuple"
        }
      ],
      "name": "ApplicationMetaPtrUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "name": "ApplicationStatusesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "ApplicationsEndTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "ApplicationsStartTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "MatchAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicationIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaPtr",
          "name": "applicationMetaPtr",
          "type": "tuple"
        }
      ],
      "name": "NewProjectApplication",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "matchAmountAfterFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "PayFeeAndEscrowFundsToPayoutContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaPtr",
          "name": "oldMetaPtr",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaPtr",
          "name": "newMetaPtr",
          "type": "tuple"
        }
      ],
      "name": "ProjectsMetaPtrUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "RoundEndTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "roundFeeAddress",
          "type": "address"
        }
      ],
      "name": "RoundFeeAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "roundFeePercentage",
          "type": "uint32"
        }
      ],
      "name": "RoundFeePercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaPtr",
          "name": "oldMetaPtr",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaPtr",
          "name": "newMetaPtr",
          "type": "tuple"
        }
      ],
      "name": "RoundMetaPtrUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTime",
          "type": "uint256"
        }
      ],
      "name": "RoundStartTimeUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUND_OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "alloSettings",
      "outputs": [
        {
          "internalType": "contract AlloSettings",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applicationMetaPtr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocol",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "pointer",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "applicationStatusesBitMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "applications",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "projectID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "applicationIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "internalType": "struct MetaPtr",
          "name": "metaPtr",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applicationsEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "applicationsIndexesByProjectID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applicationsStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectID",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "internalType": "struct MetaPtr",
          "name": "newApplicationMetaPtr",
          "type": "tuple"
        }
      ],
      "name": "applyToRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "projectID",
          "type": "bytes32"
        }
      ],
      "name": "getApplicationIndexesByProjectID",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "applicationIndex",
          "type": "uint256"
        }
      ],
      "name": "getApplicationStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encodedParameters",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_alloSettings",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "matchAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextApplicationIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutStrategy",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutStrategyFactory",
      "outputs": [
        {
          "internalType": "contract IPayoutStrategyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundFeeAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundFeePercentage",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundMetaPtr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocol",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "pointer",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusRow",
              "type": "uint256"
            }
          ],
          "internalType": "struct IRoundImplementation.ApplicationStatus[]",
          "name": "statuses",
          "type": "tuple[]"
        }
      ],
      "name": "setApplicationStatuses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setReadyForPayout",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "internalType": "struct MetaPtr",
          "name": "newApplicationMetaPtr",
          "type": "tuple"
        }
      ],
      "name": "updateApplicationMetaPtr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMatchAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newFeeAddress",
          "type": "address"
        }
      ],
      "name": "updateRoundFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newFeePercentage",
          "type": "uint32"
        }
      ],
      "name": "updateRoundFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "internalType": "struct MetaPtr",
          "name": "newRoundMetaPtr",
          "type": "tuple"
        }
      ],
      "name": "updateRoundMetaPtr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newApplicationsStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newApplicationsEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRoundStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRoundEndTime",
          "type": "uint256"
        }
      ],
      "name": "updateStartAndEndTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "encodedVotes",
          "type": "bytes[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingStrategyFactory",
      "outputs": [
        {
          "internalType": "contract IVotingStrategyFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipent",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd2e7b61098740288634fd35e0d69b0b4a2d45a9ca1ecab108a4ac23a56031b95",
  "receipt": {
    "to": null,
    "from": "0x115147d2Bf58580709221C572463c47618c853ca",
    "contractAddress": "0xaaE261E5b7694de09C1F4136D4a0b360EE321bd7",
    "transactionIndex": 0,
    "gasUsed": "3404412",
    "logsBloom": "0x
    "blockHash": "0xa7ff9e53729eea4447b87041109944206729c4f91e0edc537127060028f026cb",
    "transactionHash": "0xd2e7b61098740288634fd35e0d69b0b4a2d45a9ca1ecab108a4ac23a56031b95",
    "logs": [],
    "blockNumber": 3952567,
    "cumulativeGasUsed": "3404412",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c921f1417ace463d64cfccd1853f0d26",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct MetaPtr\",\"name\":\"oldMetaPtr\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct MetaPtr\",\"name\":\"newMetaPtr\",\"type\":\"tuple\"}],\"name\":\"ApplicationMetaPtrUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"ApplicationStatusesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"ApplicationsEndTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"ApplicationsStartTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"MatchAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicationIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct MetaPtr\",\"name\":\"applicationMetaPtr\",\"type\":\"tuple\"}],\"name\":\"NewProjectApplication\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"matchAmountAfterFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundFeeAmount\",\"type\":\"uint256\"}],\"name\":\"PayFeeAndEscrowFundsToPayoutContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct MetaPtr\",\"name\":\"oldMetaPtr\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct MetaPtr\",\"name\":\"newMetaPtr\",\"type\":\"tuple\"}],\"name\":\"ProjectsMetaPtrUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"RoundEndTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roundFeeAddress\",\"type\":\"address\"}],\"name\":\"RoundFeeAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"roundFeePercentage\",\"type\":\"uint32\"}],\"name\":\"RoundFeePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct MetaPtr\",\"name\":\"oldMetaPtr\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct MetaPtr\",\"name\":\"newMetaPtr\",\"type\":\"tuple\"}],\"name\":\"RoundMetaPtrUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"RoundStartTimeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUND_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alloSettings\",\"outputs\":[{\"internalType\":\"contract AlloSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applicationMetaPtr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applicationStatusesBitMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applications\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"applicationIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct MetaPtr\",\"name\":\"metaPtr\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applicationsEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"applicationsIndexesByProjectID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applicationsStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectID\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct MetaPtr\",\"name\":\"newApplicationMetaPtr\",\"type\":\"tuple\"}],\"name\":\"applyToRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectID\",\"type\":\"bytes32\"}],\"name\":\"getApplicationIndexesByProjectID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"applicationIndex\",\"type\":\"uint256\"}],\"name\":\"getApplicationStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedParameters\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_alloSettings\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matchAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextApplicationIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutStrategy\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutStrategyFactory\",\"outputs\":[{\"internalType\":\"contract IPayoutStrategyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundFeeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundFeePercentage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundMetaPtr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusRow\",\"type\":\"uint256\"}],\"internalType\":\"struct IRoundImplementation.ApplicationStatus[]\",\"name\":\"statuses\",\"type\":\"tuple[]\"}],\"name\":\"setApplicationStatuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setReadyForPayout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct MetaPtr\",\"name\":\"newApplicationMetaPtr\",\"type\":\"tuple\"}],\"name\":\"updateApplicationMetaPtr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMatchAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newFeeAddress\",\"type\":\"address\"}],\"name\":\"updateRoundFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newFeePercentage\",\"type\":\"uint32\"}],\"name\":\"updateRoundFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"internalType\":\"struct MetaPtr\",\"name\":\"newRoundMetaPtr\",\"type\":\"tuple\"}],\"name\":\"updateRoundMetaPtr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newApplicationsStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newApplicationsEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRoundStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRoundEndTime\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"encodedVotes\",\"type\":\"bytes[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStrategyFactory\",\"outputs\":[{\"internalType\":\"contract IVotingStrategyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipent\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"applyToRound(bytes32,(uint256,string))\":{\"params\":{\"newApplicationMetaPtr\":\"appliction metaPtr\",\"projectID\":\"unique hash of the project\"}},\"getApplicationIndexesByProjectID(bytes32)\":{\"params\":{\"projectID\":\"unique hash of the project\"},\"returns\":{\"_0\":\"applicationIndexes indexes of the applications\"}},\"getApplicationStatus(uint256)\":{\"params\":{\"applicationIndex\":\"index of the application\"},\"returns\":{\"_0\":\"status status of the application\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(bytes,address)\":{\"details\":\"encodedParameters  - _initAddress Related contract / wallet addresses  - _initRoundTime Round timestamps  - _feePercentage Fee percentage  - _matchAmount Amount of tokens in the matching pool  - _token Address of the ERC20/native token for accepting matching pool contributions  - _initMetaPtr Round metaPtrs  - _initRoles Round roles\",\"params\":{\"encodedParameters\":\"Encoded parameters for program creation\"}},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setApplicationStatuses((uint256,uint256)[])\":{\"params\":{\"statuses\":\"new statuses\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateApplicationMetaPtr((uint256,string))\":{\"params\":{\"newApplicationMetaPtr\":\"new applicationMetaPtr\"}},\"updateMatchAmount(uint256)\":{\"params\":{\"newAmount\":\"new Amount\"}},\"updateRoundFeeAddress(address)\":{\"params\":{\"newFeeAddress\":\"new fee address\"}},\"updateRoundFeePercentage(uint32)\":{\"params\":{\"newFeePercentage\":\"new fee percentage\"}},\"updateRoundMetaPtr((uint256,string))\":{\"params\":{\"newRoundMetaPtr\":\"new roundMetaPtr\"}},\"updateStartAndEndTimes(uint256,uint256,uint256,uint256)\":{\"details\":\"Only updates if new time is in the future and current set time is also in the future\",\"params\":{\"newApplicationsEndTime\":\"new applicationsEndTime\",\"newApplicationsStartTime\":\"new applicationsStartTime\",\"newRoundEndTime\":\"new roundEndTime\",\"newRoundStartTime\":\"new roundStartTime\"}},\"vote(bytes[])\":{\"params\":{\"encodedVotes\":\"encoded vote\"}},\"withdraw(address,address)\":{\"params\":{\"recipent\":\"recipient address\",\"tokenAddress\":\"token address\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ApplicationMetaPtrUpdated((uint256,string),(uint256,string))\":{\"notice\":\"Emitted when the application form metaPtr is updated\"},\"ApplicationsEndTimeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when application end time is updated\"},\"ApplicationsStartTimeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when application start time is updated\"},\"MatchAmountUpdated(uint256)\":{\"notice\":\"Emitted when match amount is updated\"},\"NewProjectApplication(bytes32,uint256,(uint256,string))\":{\"notice\":\"Emitted when a project has applied to the round\"},\"PayFeeAndEscrowFundsToPayoutContract(uint256,uint256,uint256)\":{\"notice\":\"Emitted when protocol & round fees are paid\"},\"ProjectsMetaPtrUpdated((uint256,string),(uint256,string))\":{\"notice\":\"Emitted when projects metaPtr is updated\"},\"RoundEndTimeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when a round end time is updated\"},\"RoundFeeAddressUpdated(address)\":{\"notice\":\"Emitted when a Round wallet address is updated\"},\"RoundFeePercentageUpdated(uint32)\":{\"notice\":\"Emitted when a Round fee percentage is updated\"},\"RoundMetaPtrUpdated((uint256,string),(uint256,string))\":{\"notice\":\"Emitted when the round metaPtr is updated\"},\"RoundStartTimeUpdated(uint256,uint256)\":{\"notice\":\"Emitted when a round start time is updated\"}},\"kind\":\"user\",\"methods\":{\"ROUND_OPERATOR_ROLE()\":{\"notice\":\"round operator role\"},\"alloSettings()\":{\"notice\":\"Allo Config Contract Address\"},\"applicationMetaPtr()\":{\"notice\":\"MetaPtr to the application form schema\"},\"applicationsEndTime()\":{\"notice\":\"Unix timestamp from when round stops accepting applications\"},\"applicationsStartTime()\":{\"notice\":\"Unix timestamp from when round can accept applications\"},\"applyToRound(bytes32,(uint256,string))\":{\"notice\":\"Submit a project application\"},\"getApplicationIndexesByProjectID(bytes32)\":{\"notice\":\"Get all applications of a projectID\"},\"getApplicationStatus(uint256)\":{\"notice\":\"Get application status\"},\"initialize(bytes,address)\":{\"notice\":\"Instantiates a new round\"},\"matchAmount()\":{\"notice\":\"Match Amount (excluding protocol fee & round fee)\"},\"payoutStrategy()\":{\"notice\":\"Payout Strategy Contract Address\"},\"payoutStrategyFactory()\":{\"notice\":\"Payout Strategy Factory Contract Address\"},\"roundEndTime()\":{\"notice\":\"Unix timestamp of the end of the round\"},\"roundFeeAddress()\":{\"notice\":\"Round fee address\"},\"roundFeePercentage()\":{\"notice\":\"Round fee percentage\"},\"roundMetaPtr()\":{\"notice\":\"MetaPtr to the round metadata\"},\"roundStartTime()\":{\"notice\":\"Unix timestamp of the start of the round\"},\"setApplicationStatuses((uint256,uint256)[])\":{\"notice\":\"Set application statuses\"},\"setReadyForPayout()\":{\"notice\":\"Pay Protocol & Round Fees and transfer funds to payout contract (only by ROUND_OPERATOR_ROLE)\"},\"token()\":{\"notice\":\"Token used to payout match amounts at the end of a round\"},\"updateStartAndEndTimes(uint256,uint256,uint256,uint256)\":{\"notice\":\"Update application, round start & end times (only by ROUND_OPERATOR_ROLE)\"},\"vote(bytes[])\":{\"notice\":\"Invoked by voter to cast votes\"},\"votingStrategy()\":{\"notice\":\"Voting Strategy Contract Address\"},\"votingStrategyFactory()\":{\"notice\":\"Voting Strategy Factory Contract Address\"},\"withdraw(address,address)\":{\"notice\":\"Withdraw funds from the contract (only by ROUND_OPERATOR_ROLE)\"}},\"notice\":\"Contract deployed per Round which would be managed by a group of ROUND_OPERATOR via the RoundFactory\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/round/RoundImplementation.sol\":\"RoundImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7d24c901e098a04fa7f388c9ff1890bb522307272a2fee8030ee15a8d907096f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.5) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable, ContextUpgradeable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = AddressUpgradeable.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb1c0020052d12ce986fba21a25a75ef1aec0142007a23f345842c924ad9c71d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/payoutStrategy/IPayoutStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/MetaPtr.sol\\\";\\r\\nimport \\\"../round/RoundImplementation.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Defines the abstract contract for payout strategies\\r\\n * for a round. Any new payout strategy would be expected to\\r\\n * extend this abstract contract.\\r\\n *\\r\\n * Every PayoutStrategyImplementation contract would be unique to RoundImplementation\\r\\n * and would be deployed before creating a round.\\r\\n *\\r\\n * @dev\\r\\n *  - Deployed before creating a round\\r\\n *  - Funds are transferred to the payout contract from round only during payout\\r\\n */\\r\\nabstract contract IPayoutStrategy {\\r\\n\\r\\n  // --- Constants ---\\r\\n\\r\\n  /// @notice round operator role\\r\\n  bytes32 public constant ROUND_OPERATOR_ROLE = keccak256(\\\"ROUND_OPERATOR\\\");\\r\\n\\r\\n  // --- Data ---\\r\\n\\r\\n  /// @notice RoundImplementation address\\r\\n  address payable public roundAddress;\\r\\n\\r\\n  /// @notice Token address\\r\\n  address public tokenAddress;\\r\\n\\r\\n  // @notice\\r\\n  bool public isReadyForPayout;\\r\\n\\r\\n  // --- Event ---\\r\\n\\r\\n  /// @notice Emitted when contract is ready for payout\\r\\n  event ReadyForPayout();\\r\\n\\r\\n  // --- Modifier ---\\r\\n\\r\\n  /// @notice modifier to check if sender is round contract.\\r\\n  modifier isRoundContract() {\\r\\n    require(roundAddress != address(0), \\\"not linked to a round\\\");\\r\\n    require(msg.sender == roundAddress, \\\"not invoked by round\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @notice modifier to check if sender is round operator.\\r\\n  modifier isRoundOperator() {\\r\\n    require(\\r\\n      RoundImplementation(roundAddress).hasRole(ROUND_OPERATOR_ROLE, msg.sender),\\r\\n      \\\"not round operator\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @notice modifier to check if round has ended.\\r\\n  modifier roundHasEnded() {\\r\\n    uint roundEndTime = RoundImplementation(roundAddress).roundEndTime();\\r\\n    require(block.timestamp > roundEndTime, \\\"round has not ended\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // --- Core Methods ---\\r\\n\\r\\n  /**\\r\\n   * @notice Invoked by RoundImplementation on creation to\\r\\n   * set the round for which the payout strategy is to be used\\r\\n   */\\r\\n  function init() external virtual {\\r\\n    require(roundAddress == address(0x0), \\\"roundAddress already set\\\");\\r\\n    roundAddress = payable(msg.sender);\\r\\n\\r\\n    // set the token address\\r\\n    tokenAddress = RoundImplementation(roundAddress).token();\\r\\n\\r\\n    isReadyForPayout = false;\\r\\n  }\\r\\n\\r\\n  /// @notice Invoked by RoundImplementation to set isReadyForPayout\\r\\n  /// @dev Can only be called once and (by default) cannot be changed once called\\r\\n  function setReadyForPayout() virtual external payable isRoundContract roundHasEnded {\\r\\n    require(isReadyForPayout == false, \\\"isReadyForPayout already set\\\");\\r\\n\\r\\n    isReadyForPayout = true;\\r\\n    emit ReadyForPayout();\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x6e0070f188722cce37535ee50ba37d126066a57ecf1b287dfdb5d4095a7eba43\",\"license\":\"AGPL-3.0-only\"},\"contracts/payoutStrategy/IPayoutStrategyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPayoutStrategyFactory {\\r\\n    function initialize() external;\\r\\n\\r\\n    function updatePayoutImplementation(\\r\\n        address payable newPayoutImplementation\\r\\n    ) external;\\r\\n\\r\\n    function create() external returns (address);\\r\\n}\",\"keccak256\":\"0x502843186fda00fb6855d6e2c3662de17113dd8fa08dd4a6cc818a889ad12f39\",\"license\":\"AGPL-3.0-only\"},\"contracts/round/IRoundImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/MetaPtr.sol\\\";\\r\\n\\r\\ninterface IRoundImplementation {\\r\\n    struct ApplicationStatus {\\r\\n        uint256 index;\\r\\n        uint256 statusRow;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        bytes calldata encodedParameters,\\r\\n        address _alloSettings\\r\\n    ) external;\\r\\n\\r\\n    function updateMatchAmount(uint256 newAmount) external;\\r\\n\\r\\n    function updateRoundFeePercentage(uint32 newFeePercentage) external;\\r\\n\\r\\n    function updateRoundFeeAddress(address payable newFeeAddress) external;\\r\\n\\r\\n    function updateRoundMetaPtr(MetaPtr memory newRoundMetaPtr) external;\\r\\n\\r\\n    function updateApplicationMetaPtr(\\r\\n        MetaPtr memory newApplicationMetaPtr\\r\\n    ) external;\\r\\n\\r\\n    function updateStartAndEndTimes(\\r\\n        uint256 newApplicationsStartTime,\\r\\n        uint256 newApplicationsEndTime,\\r\\n        uint256 newRoundStartTime,\\r\\n        uint256 newRoundEndTime\\r\\n    ) external;\\r\\n\\r\\n    function applyToRound(\\r\\n        bytes32 projectID,\\r\\n        MetaPtr calldata newApplicationMetaPtr\\r\\n    ) external;\\r\\n\\r\\n    function getApplicationIndexesByProjectID(\\r\\n        bytes32 projectID\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApplicationStatuses(\\r\\n        ApplicationStatus[] memory statuses\\r\\n    ) external;\\r\\n\\r\\n    function getApplicationStatus(\\r\\n        uint256 applicationIndex\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function vote(bytes[] memory encodedVotes) external payable;\\r\\n\\r\\n    function setReadyForPayout() external payable;\\r\\n\\r\\n    function withdraw(address tokenAddress, address payable recipent) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x424fa4d73314d5ed1ce110274796ba085b25d742a7f68ad72a2b77dd999c5044\",\"license\":\"AGPL-3.0-only\"},\"contracts/round/RoundImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IRoundImplementation.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../settings/AlloSettings.sol\\\";\\r\\nimport \\\"../votingStrategy/IVotingStrategyFactory.sol\\\";\\r\\nimport \\\"../payoutStrategy/IPayoutStrategyFactory.sol\\\";\\r\\nimport \\\"../votingStrategy/IVotingStrategy.sol\\\";\\r\\nimport \\\"../payoutStrategy/IPayoutStrategy.sol\\\";\\r\\n\\r\\nimport \\\"../utils/MetaPtr.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Contract deployed per Round which would be managed by\\r\\n * a group of ROUND_OPERATOR via the RoundFactory\\r\\n *\\r\\n */\\r\\ncontract RoundImplementation is IRoundImplementation, Initializable, AccessControlEnumerableUpgradeable, MulticallUpgradeable {\\r\\n\\r\\n  string public constant VERSION = \\\"1.0.0\\\";\\r\\n\\r\\n  // --- Libraries ---\\r\\n  using Address for address;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  // --- Roles ---\\r\\n\\r\\n  /// @notice round operator role\\r\\n  bytes32 public constant ROUND_OPERATOR_ROLE = keccak256(\\\"ROUND_OPERATOR\\\");\\r\\n\\r\\n  // --- Events ---\\r\\n\\r\\n  /// @notice Emitted when match amount is updated\\r\\n  event MatchAmountUpdated(uint256 newAmount);\\r\\n\\r\\n  /// @notice Emitted when a Round fee percentage is updated\\r\\n  event RoundFeePercentageUpdated(uint32 roundFeePercentage);\\r\\n\\r\\n  /// @notice Emitted when a Round wallet address is updated\\r\\n  event RoundFeeAddressUpdated(address roundFeeAddress);\\r\\n\\r\\n  /// @notice Emitted when the round metaPtr is updated\\r\\n  event RoundMetaPtrUpdated(MetaPtr oldMetaPtr, MetaPtr newMetaPtr);\\r\\n\\r\\n  /// @notice Emitted when the application form metaPtr is updated\\r\\n  event ApplicationMetaPtrUpdated(MetaPtr oldMetaPtr, MetaPtr newMetaPtr);\\r\\n\\r\\n  /// @notice Emitted when application start time is updated\\r\\n  event ApplicationsStartTimeUpdated(uint256 oldTime, uint256 newTime);\\r\\n\\r\\n  /// @notice Emitted when application end time is updated\\r\\n  event ApplicationsEndTimeUpdated(uint256 oldTime, uint256 newTime);\\r\\n\\r\\n  /// @notice Emitted when a round start time is updated\\r\\n  event RoundStartTimeUpdated(uint256 oldTime, uint256 newTime);\\r\\n\\r\\n  /// @notice Emitted when a round end time is updated\\r\\n  event RoundEndTimeUpdated(uint256 oldTime, uint256 newTime);\\r\\n\\r\\n  /// @notice Emitted when projects metaPtr is updated\\r\\n  event ProjectsMetaPtrUpdated(MetaPtr oldMetaPtr, MetaPtr newMetaPtr);\\r\\n\\r\\n  /// @notice Emitted when a project has applied to the round\\r\\n  event NewProjectApplication(bytes32 indexed projectID, uint256 applicationIndex, MetaPtr applicationMetaPtr);\\r\\n\\r\\n  /// @notice Emitted when protocol & round fees are paid\\r\\n  event PayFeeAndEscrowFundsToPayoutContract(uint256 matchAmountAfterFees, uint protocolFeeAmount, uint roundFeeAmount);\\r\\n\\r\\n  event ApplicationStatusesUpdated(uint256 indexed index, uint256 indexed status);\\r\\n\\r\\n  // --- Modifier ---\\r\\n\\r\\n  /// @notice modifier to check if round has not ended.\\r\\n  modifier roundHasNotEnded() {\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(block.timestamp <= roundEndTime, \\\"Round: Round has ended\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @notice modifier to check if round has ended.\\r\\n  modifier roundHasEnded() {\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(block.timestamp > roundEndTime, \\\"Round: Round has not ended\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // --- Data ---\\r\\n\\r\\n  /// @notice Allo Config Contract Address\\r\\n  AlloSettings public alloSettings;\\r\\n\\r\\n  /// @notice Voting Strategy Factory Contract Address\\r\\n  IVotingStrategyFactory public votingStrategyFactory;\\r\\n\\r\\n  /// @notice Payout Strategy Factory Contract Address\\r\\n  IPayoutStrategyFactory public payoutStrategyFactory;\\r\\n\\r\\n  /// @notice Voting Strategy Contract Address\\r\\n  address public votingStrategy;\\r\\n\\r\\n  /// @notice Payout Strategy Contract Address\\r\\n  address payable public payoutStrategy;\\r\\n\\r\\n  /// @notice Unix timestamp from when round can accept applications\\r\\n  uint256 public applicationsStartTime;\\r\\n\\r\\n  /// @notice Unix timestamp from when round stops accepting applications\\r\\n  uint256 public applicationsEndTime;\\r\\n\\r\\n  /// @notice Unix timestamp of the start of the round\\r\\n  uint256 public roundStartTime;\\r\\n\\r\\n  /// @notice Unix timestamp of the end of the round\\r\\n  uint256 public roundEndTime;\\r\\n\\r\\n  /// @notice Match Amount (excluding protocol fee & round fee)\\r\\n  uint256 public matchAmount;\\r\\n\\r\\n  /// @notice Token used to payout match amounts at the end of a round\\r\\n  address public token;\\r\\n\\r\\n  /// @notice Round fee percentage\\r\\n  uint32 public roundFeePercentage;\\r\\n\\r\\n  /// @notice Round fee address\\r\\n  address payable public roundFeeAddress;\\r\\n\\r\\n  /// @notice MetaPtr to the round metadata\\r\\n  MetaPtr public roundMetaPtr;\\r\\n\\r\\n  /// @notice MetaPtr to the application form schema\\r\\n  MetaPtr public applicationMetaPtr;\\r\\n\\r\\n  // --- Struct ---\\r\\n\\r\\n  struct InitAddress {\\r\\n    IVotingStrategyFactory votingStrategyFactory; // Deployed voting strategy factory contract\\r\\n    IPayoutStrategyFactory payoutStrategyFactory; // Deployed payout strategy factory contract\\r\\n  }\\r\\n\\r\\n  struct InitRoundTime {\\r\\n    uint256 applicationsStartTime; // Unix timestamp from when round can accept applications\\r\\n    uint256 applicationsEndTime; // Unix timestamp from when round stops accepting applications\\r\\n    uint256 roundStartTime; // Unix timestamp of the start of the round\\r\\n    uint256 roundEndTime; // Unix timestamp of the end of the round\\r\\n  }\\r\\n\\r\\n  struct InitMetaPtr {\\r\\n    MetaPtr roundMetaPtr; // MetaPtr to the round metadata\\r\\n    MetaPtr applicationMetaPtr; // MetaPtr to the application form schema\\r\\n  }\\r\\n\\r\\n  struct InitRoles {\\r\\n    address[] adminRoles; // Addresses to be granted DEFAULT_ADMIN_ROLE\\r\\n    address[] roundOperators; // Addresses to be granted ROUND_OPERATOR_ROLE\\r\\n  }\\r\\n\\r\\n  struct Application {\\r\\n    bytes32 projectID;\\r\\n    uint256 applicationIndex;\\r\\n    MetaPtr metaPtr;\\r\\n  }\\r\\n\\r\\n  uint256 public nextApplicationIndex;\\r\\n\\r\\n  // An array of applications, each new application is appended to the array\\r\\n  Application[] public applications;\\r\\n  mapping(bytes32 => uint256[]) public applicationsIndexesByProjectID;\\r\\n\\r\\n  // This is a packed array of booleans.\\r\\n  // statuses[0] is the first row of the bitmap and allows to store 256 bits to describe\\r\\n  // the status of 256 projects.\\r\\n  // statuses[1] is the second row, and so on.\\r\\n  // Instead of using 1 bit for each application status, we use 2 bits to allow 4 statuses:\\r\\n  // 0: pending\\r\\n  // 1: approved\\r\\n  // 2: rejected\\r\\n  // 3: canceled\\r\\n  // Since it's a mapping, the storage is pre-allocated with zero values,\\r\\n  // so if we check the status of an existing application, the value is by default 0 (pending).\\r\\n  // If we want to check the status of an application, we take its index from the `applications` array\\r\\n  // and convert it to the 2-bits position in the bitmap.\\r\\n  mapping(uint256 => uint256) public applicationStatusesBitMap;\\r\\n\\r\\n  // --- Core methods ---\\r\\n\\r\\n  /**\\r\\n   * @notice Instantiates a new round\\r\\n   * @param encodedParameters Encoded parameters for program creation\\r\\n   * @dev encodedParameters\\r\\n   *  - _initAddress Related contract / wallet addresses\\r\\n   *  - _initRoundTime Round timestamps\\r\\n   *  - _feePercentage Fee percentage\\r\\n   *  - _matchAmount Amount of tokens in the matching pool\\r\\n   *  - _token Address of the ERC20/native token for accepting matching pool contributions\\r\\n   *  - _initMetaPtr Round metaPtrs\\r\\n   *  - _initRoles Round roles\\r\\n   */\\r\\n  function initialize(\\r\\n    bytes calldata encodedParameters,\\r\\n    address _alloSettings\\r\\n  ) external initializer {\\r\\n    // Decode _encodedParameters\\r\\n    (\\r\\n      InitAddress memory _initAddress,\\r\\n      InitRoundTime memory _initRoundTime,\\r\\n      uint256 _matchAmount,\\r\\n      address _token,\\r\\n      uint32 _roundFeePercentage,\\r\\n      address payable _roundFeeAddress,\\r\\n      InitMetaPtr memory _initMetaPtr,\\r\\n      InitRoles memory _initRoles\\r\\n    ) = abi.decode(\\r\\n      encodedParameters, (\\r\\n      (InitAddress),\\r\\n      (InitRoundTime),\\r\\n      uint256,\\r\\n      address,\\r\\n      uint32,\\r\\n      address,\\r\\n      (InitMetaPtr),\\r\\n      (InitRoles)\\r\\n    ));\\r\\n\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(\\r\\n      _initRoundTime.applicationsStartTime >= block.timestamp,\\r\\n      \\\"Round: Time has already passed\\\"\\r\\n    );\\r\\n    require(\\r\\n      _initRoundTime.applicationsEndTime > _initRoundTime.applicationsStartTime,\\r\\n      \\\"Round: App end is before app start\\\"\\r\\n    );\\r\\n    require(\\r\\n      _initRoundTime.roundEndTime >= _initRoundTime.applicationsEndTime,\\r\\n      \\\"Round: Round end is before app end\\\"\\r\\n    );\\r\\n    require(\\r\\n      _initRoundTime.roundEndTime > _initRoundTime.roundStartTime,\\r\\n      \\\"Round: Round end is before round start\\\"\\r\\n    );\\r\\n    require(\\r\\n      _initRoundTime.roundStartTime >= _initRoundTime.applicationsStartTime,\\r\\n      \\\"Round: Round start is before app start\\\"\\r\\n    );\\r\\n\\r\\n    alloSettings = AlloSettings(_alloSettings);\\r\\n\\r\\n    votingStrategyFactory = _initAddress.votingStrategyFactory;\\r\\n    payoutStrategyFactory = _initAddress.payoutStrategyFactory;\\r\\n    applicationsStartTime = _initRoundTime.applicationsStartTime;\\r\\n    applicationsEndTime = _initRoundTime.applicationsEndTime;\\r\\n    roundStartTime = _initRoundTime.roundStartTime;\\r\\n    roundEndTime = _initRoundTime.roundEndTime;\\r\\n    token = _token;\\r\\n\\r\\n    // deploy voting contract\\r\\n    votingStrategy = votingStrategyFactory.create();\\r\\n\\r\\n    // Invoke init on voting contract\\r\\n    IVotingStrategy(votingStrategy).init();\\r\\n\\r\\n    // deploy payout contract\\r\\n    payoutStrategy = payable(payoutStrategyFactory.create());\\r\\n\\r\\n    // Invoke init on payout contract\\r\\n    IPayoutStrategy(payoutStrategy).init();\\r\\n\\r\\n    matchAmount = _matchAmount;\\r\\n    roundFeePercentage = _roundFeePercentage;\\r\\n    roundFeeAddress = _roundFeeAddress;\\r\\n    roundMetaPtr = _initMetaPtr.roundMetaPtr;\\r\\n    applicationMetaPtr = _initMetaPtr.applicationMetaPtr;\\r\\n\\r\\n    // Assigning default admin role\\r\\n    for (uint256 i = 0; i < _initRoles.adminRoles.length; ++i) {\\r\\n      _grantRole(DEFAULT_ADMIN_ROLE, _initRoles.adminRoles[i]);\\r\\n    }\\r\\n\\r\\n    // Assigning round operators\\r\\n    for (uint256 i = 0; i < _initRoles.roundOperators.length; ++i) {\\r\\n      _grantRole(ROUND_OPERATOR_ROLE, _initRoles.roundOperators[i]);\\r\\n    }\\r\\n\\r\\n    __Multicall_init();\\r\\n  }\\r\\n\\r\\n  // @notice Update match amount (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param newAmount new Amount\\r\\n  function updateMatchAmount(uint256 newAmount) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    require(newAmount > matchAmount, \\\"Round: Lesser than current match amount\\\");\\r\\n\\r\\n    matchAmount = newAmount;\\r\\n\\r\\n    emit MatchAmountUpdated(newAmount);\\r\\n  }\\r\\n\\r\\n  // @notice Update round fee percentage (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param newFeePercentage new fee percentage\\r\\n  function updateRoundFeePercentage(uint32 newFeePercentage) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    roundFeePercentage = newFeePercentage;\\r\\n    emit RoundFeePercentageUpdated(roundFeePercentage);\\r\\n  }\\r\\n\\r\\n  // @notice Update round fee address (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param newFeeAddress new fee address\\r\\n  function updateRoundFeeAddress(address payable newFeeAddress) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    roundFeeAddress = newFeeAddress;\\r\\n    emit RoundFeeAddressUpdated(newFeeAddress);\\r\\n  }\\r\\n\\r\\n  // @notice Update roundMetaPtr (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param newRoundMetaPtr new roundMetaPtr\\r\\n  function updateRoundMetaPtr(MetaPtr memory newRoundMetaPtr) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    emit RoundMetaPtrUpdated(roundMetaPtr, newRoundMetaPtr);\\r\\n    roundMetaPtr = newRoundMetaPtr;\\r\\n  }\\r\\n\\r\\n  // @notice Update applicationMetaPtr (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param newApplicationMetaPtr new applicationMetaPtr\\r\\n  function updateApplicationMetaPtr(MetaPtr memory newApplicationMetaPtr) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    emit ApplicationMetaPtrUpdated(applicationMetaPtr, newApplicationMetaPtr);\\r\\n    applicationMetaPtr = newApplicationMetaPtr;\\r\\n  }\\r\\n\\r\\n  /// @notice Update application, round start & end times (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @dev Only updates if new time is in the future and current set time is also in the future\\r\\n  /// @param newApplicationsStartTime new applicationsStartTime\\r\\n  /// @param newApplicationsEndTime new applicationsEndTime\\r\\n  /// @param newRoundStartTime new roundStartTime\\r\\n  /// @param newRoundEndTime new roundEndTime\\r\\n  function updateStartAndEndTimes(\\r\\n    uint256 newApplicationsStartTime,\\r\\n    uint256 newApplicationsEndTime,\\r\\n    uint256 newRoundStartTime,\\r\\n    uint256 newRoundEndTime\\r\\n  ) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(newApplicationsStartTime < newApplicationsEndTime, \\\"Round: Application end is before application start\\\");\\r\\n    require(newRoundStartTime < newRoundEndTime, \\\"Round: Round end is before round start\\\");\\r\\n    require(newApplicationsStartTime <= newRoundStartTime, \\\"Round: Round start is before application start\\\");\\r\\n    require(newApplicationsEndTime <= newRoundEndTime, \\\"Round: Round end is before application end\\\");\\r\\n    require(block.timestamp <= newApplicationsStartTime, \\\"Round: Time has already passed\\\");\\r\\n\\r\\n    if (\\r\\n      applicationsStartTime >= block.timestamp &&\\r\\n      newApplicationsStartTime != applicationsStartTime\\r\\n    ) {\\r\\n      emit ApplicationsStartTimeUpdated(applicationsStartTime, newApplicationsStartTime);\\r\\n      applicationsStartTime = newApplicationsStartTime;\\r\\n    }\\r\\n\\r\\n    if (\\r\\n      applicationsEndTime >= block.timestamp &&\\r\\n      newApplicationsEndTime != applicationsEndTime\\r\\n    ) {\\r\\n      emit ApplicationsEndTimeUpdated(applicationsEndTime, newApplicationsEndTime);\\r\\n      applicationsEndTime = newApplicationsEndTime;\\r\\n    }\\r\\n\\r\\n    if (\\r\\n      roundStartTime >= block.timestamp &&\\r\\n      newRoundStartTime != roundStartTime\\r\\n    ) {\\r\\n      emit RoundStartTimeUpdated(roundStartTime, newRoundStartTime);\\r\\n      roundStartTime = newRoundStartTime;\\r\\n    }\\r\\n\\r\\n    if (\\r\\n      roundEndTime >= block.timestamp &&\\r\\n      newRoundEndTime != roundEndTime\\r\\n    ) {\\r\\n      emit RoundEndTimeUpdated(roundEndTime, newRoundEndTime);\\r\\n      roundEndTime = newRoundEndTime;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Submit a project application\\r\\n  /// @param projectID unique hash of the project\\r\\n  /// @param newApplicationMetaPtr appliction metaPtr\\r\\n  function applyToRound(bytes32 projectID, MetaPtr calldata newApplicationMetaPtr) external {\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(\\r\\n      applicationsStartTime <= block.timestamp  &&\\r\\n      block.timestamp <= applicationsEndTime,\\r\\n      \\\"Round: Applications period not started or over\\\"\\r\\n    );\\r\\n    applications.push(Application(projectID, nextApplicationIndex, newApplicationMetaPtr));\\r\\n    applicationsIndexesByProjectID[projectID].push(nextApplicationIndex);\\r\\n    emit NewProjectApplication(projectID, nextApplicationIndex, newApplicationMetaPtr);\\r\\n    nextApplicationIndex++;\\r\\n  }\\r\\n\\r\\n  /// @notice Get all applications of a projectID\\r\\n  /// @param projectID unique hash of the project\\r\\n  /// @return applicationIndexes indexes of the applications\\r\\n  function getApplicationIndexesByProjectID(bytes32 projectID) external view returns(uint256[] memory) {\\r\\n    return applicationsIndexesByProjectID[projectID];\\r\\n  }\\r\\n\\r\\n  // Statuses:\\r\\n  // * 0 - pending\\r\\n  // * 1 - approved\\r\\n  // * 2 - rejected\\r\\n  // * 3 - canceled\\r\\n  /// Set application statuses\\r\\n  /// @param statuses new statuses\\r\\n  function setApplicationStatuses(ApplicationStatus[] memory statuses) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    for (uint256 i = 0; i < statuses.length;) {\\r\\n      uint256 rowIndex = statuses[i].index;\\r\\n      uint256 fullRow = statuses[i].statusRow;\\r\\n\\r\\n      applicationStatusesBitMap[rowIndex] = fullRow;\\r\\n\\r\\n      emit ApplicationStatusesUpdated(rowIndex, fullRow);\\r\\n\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Get application status\\r\\n  /// @param applicationIndex index of the application\\r\\n  /// @return status status of the application\\r\\n  function getApplicationStatus(uint256 applicationIndex) external view returns(uint256) {\\r\\n    require(applicationIndex < applications.length, \\\"Round: Application does not exist\\\");\\r\\n\\r\\n    uint256 rowIndex = applicationIndex / 128;\\r\\n    uint256 colIndex = (applicationIndex % 128) * 2;\\r\\n\\r\\n    uint256 currentRow = applicationStatusesBitMap[rowIndex];\\r\\n    uint256 status = (currentRow >> colIndex) & 3;\\r\\n\\r\\n    return status;\\r\\n  }\\r\\n\\r\\n  /// @notice Invoked by voter to cast votes\\r\\n  /// @param encodedVotes encoded vote\\r\\n  function vote(bytes[] memory encodedVotes) external payable {\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(\\r\\n      roundStartTime <= block.timestamp &&\\r\\n      block.timestamp <= roundEndTime,\\r\\n      \\\"Round: Round is not active\\\"\\r\\n    );\\r\\n\\r\\n    IVotingStrategy(votingStrategy).vote{value: msg.value}(encodedVotes, msg.sender);\\r\\n  }\\r\\n\\r\\n  /// @notice Pay Protocol & Round Fees and transfer funds to payout contract (only by ROUND_OPERATOR_ROLE)\\r\\n  function setReadyForPayout() external payable roundHasEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    uint256 fundsInContract = _getTokenBalance(token);\\r\\n    uint32 denominator = alloSettings.DENOMINATOR();\\r\\n\\r\\n    uint256 protocolFeeAmount = (matchAmount * alloSettings.protocolFeePercentage()) / denominator;\\r\\n    uint256 roundFeeAmount = (matchAmount * roundFeePercentage) / denominator;\\r\\n\\r\\n    // total funds needed for payout\\r\\n    uint256 neededFunds = matchAmount + protocolFeeAmount + roundFeeAmount;\\r\\n\\r\\n    require(fundsInContract >= neededFunds, \\\"Round: Not enough funds in contract\\\");\\r\\n\\r\\n    // deduct protocol fee\\r\\n    if (protocolFeeAmount > 0) {\\r\\n      address payable protocolTreasury = alloSettings.protocolTreasury();\\r\\n      _transferAmount(protocolTreasury, protocolFeeAmount, token);\\r\\n    }\\r\\n\\r\\n    // deduct round fee\\r\\n    if (roundFeeAmount > 0) {\\r\\n      _transferAmount(roundFeeAddress, roundFeeAmount, token);\\r\\n    }\\r\\n\\r\\n    // update funds in contract after fee deduction\\r\\n    fundsInContract = _getTokenBalance(token);\\r\\n\\r\\n    // transfer funds to payout contract\\r\\n    if (token == address(0)) {\\r\\n      IPayoutStrategy(payoutStrategy).setReadyForPayout{value: fundsInContract}();\\r\\n    } else {\\r\\n      IERC20(token).safeTransfer(address(payoutStrategy), fundsInContract);\\r\\n      IPayoutStrategy(payoutStrategy).setReadyForPayout();\\r\\n    }\\r\\n\\r\\n    emit PayFeeAndEscrowFundsToPayoutContract(fundsInContract, protocolFeeAmount, roundFeeAmount);\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraw funds from the contract (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param tokenAddress token address\\r\\n  /// @param recipent recipient address\\r\\n  function withdraw(address tokenAddress, address payable recipent) external onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    require(tokenAddress != token, \\\"Round: Cannot withdraw round token\\\");\\r\\n    _transferAmount(recipent, _getTokenBalance(tokenAddress), tokenAddress);\\r\\n  }\\r\\n\\r\\n  /// @notice Util function to get token balance in the contract\\r\\n  /// @param tokenAddress token address\\r\\n  function _getTokenBalance(address tokenAddress) private view returns (uint256) {\\r\\n    if (tokenAddress == address(0)) {\\r\\n      return address(this).balance;\\r\\n    } else {\\r\\n      return IERC20(tokenAddress).balanceOf(address(this));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Util function to transfer amount to recipient\\r\\n  /// @param _recipient recipient address\\r\\n  /// @param _amount amount to transfer\\r\\n  /// @param _tokenAddress token address\\r\\n  function _transferAmount(address payable _recipient, uint256 _amount, address _tokenAddress) private {\\r\\n    if (_tokenAddress == address(0)) {\\r\\n      Address.sendValue(_recipient, _amount);\\r\\n    } else {\\r\\n      IERC20(_tokenAddress).safeTransfer(_recipient, _amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Override functions to resolve conflicts\\r\\n  function _msgSender() internal view override(ContextUpgradeable) returns (address) {\\r\\n      return ContextUpgradeable._msgSender();\\r\\n  }\\r\\n  \\r\\n  function _msgData() internal view override(ContextUpgradeable) returns (bytes calldata) {\\r\\n      return ContextUpgradeable._msgData();\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x299bd44ca4e90258d5e913b0d11a53d1ddbe90a02ea71d6d70fc44bc92fff214\",\"license\":\"AGPL-3.0-only\"},\"contracts/settings/AlloSettings.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract AlloSettings is OwnableUpgradeable {\\r\\n\\r\\n  string public constant VERSION = \\\"1.0.0\\\";\\r\\n\\r\\n  // 1000 * 100\\r\\n  uint24 public constant DENOMINATOR = 100000;\\r\\n\\r\\n  // --- Data ---\\r\\n\\r\\n  /// @notice Address of the protocol treasury\\r\\n  address payable public protocolTreasury;\\r\\n\\r\\n  /// @notice Protocol fee percentage\\r\\n  /// 100% = 100_000 | 10% = 10_000 | 1% = 1_000 | 0.1% = 100 | 0.01% = 10\\r\\n  uint24 public protocolFeePercentage;\\r\\n\\r\\n  // --- Event ---\\r\\n\\r\\n  /// @notice Emitted when protocol fee percentage is updated\\r\\n  event ProtocolFeePercentageUpdated(uint24 protocolFeePercentage);\\r\\n\\r\\n  /// @notice Emitted when a protocol wallet address is updated\\r\\n  event ProtocolTreasuryUpdated(address protocolTreasuryAddress);\\r\\n\\r\\n  /// @notice constructor function which ensure deployer is set as owner\\r\\n  function initialize() external initializer {\\r\\n    __Context_init_unchained();\\r\\n    __Ownable_init_unchained();\\r\\n  }\\r\\n\\r\\n  // --- Core methods ---\\r\\n\\r\\n  /// @notice Set the protocol fee percentage\\r\\n  /// @param _protocolFeePercentage The new protocol fee percentage\\r\\n  function updateProtocolFeePercentage(uint24 _protocolFeePercentage) external onlyOwner {\\r\\n\\r\\n    require(_protocolFeePercentage <= DENOMINATOR , \\\"value exceeds 100%\\\");\\r\\n\\r\\n    protocolFeePercentage = _protocolFeePercentage;\\r\\n    emit ProtocolFeePercentageUpdated(protocolFeePercentage);\\r\\n  }\\r\\n\\r\\n  /// @notice Set the protocol treasury address\\r\\n  /// @param _protocolTreasury The new protocol treasury address\\r\\n  function updateProtocolTreasury(address payable _protocolTreasury) external onlyOwner {\\r\\n    protocolTreasury = _protocolTreasury;\\r\\n    emit ProtocolTreasuryUpdated(protocolTreasury);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x8d36edb76a3c096597029b2e96a112fb66e629e67f13d7d35f6ea14fa7607077\",\"license\":\"AGPL-3.0-only\"},\"contracts/utils/MetaPtr.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct MetaPtr {\\r\\n\\r\\n  /// @notice Protocol ID corresponding to a specific protocol.\\r\\n  /// More info at https://github.com/allo-protocol/contracts/tree/main/docs/MetaPtrProtocol.md\\r\\n  uint256 protocol;\\r\\n  \\r\\n  /// @notice Pointer to fetch metadata for the specified protocol\\r\\n  string pointer;\\r\\n}\",\"keccak256\":\"0x0c0282e30607fcfddcd64564c27a57f06453a110262c9d986b171d0ddffbc2ca\",\"license\":\"AGPL-3.0-only\"},\"contracts/votingStrategy/IVotingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice Defines the abstract contract for voting algorithms on grants\\r\\n * within a round. Any new voting algorithm would be expected to\\r\\n * extend this abstract contract.\\r\\n * Every IVotingStrategy contract would be unique to RoundImplementation\\r\\n * and would be deployed before creating a round\\r\\n */\\r\\nabstract contract IVotingStrategy {\\r\\n\\r\\n   // --- Data ---\\r\\n\\r\\n  /// @notice Round address\\r\\n  address public roundAddress;\\r\\n\\r\\n\\r\\n  // --- Modifier ---\\r\\n\\r\\n  /// @notice modifier to check if sender is round contract.\\r\\n  modifier isRoundContract() {\\r\\n    require(roundAddress != address(0), \\\"error: voting contract not linked to a round\\\");\\r\\n    require(msg.sender == roundAddress, \\\"error: can be invoked only by round contract\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n\\r\\n  // --- Core methods ---\\r\\n\\r\\n  /**\\r\\n   * @notice Invoked by RoundImplementation on creation to\\r\\n   * set the round for which the voting contracts is to be used\\r\\n   *\\r\\n   */\\r\\n  function init() external virtual {\\r\\n    require(roundAddress == address(0), \\\"init: roundAddress already set\\\");\\r\\n    roundAddress = msg.sender;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Invoked by RoundImplementation to allow voter to case\\r\\n   * vote for grants during a round.\\r\\n   *\\r\\n   * @dev\\r\\n   * - allows contributor to do cast multiple votes which could be weighted.\\r\\n   * - should be invoked by RoundImplementation contract\\r\\n   * - ideally IVotingStrategy implementation should emit events after a vote is cast\\r\\n   * - this would be triggered when a voter casts their vote via grant explorer\\r\\n   *\\r\\n   * @param _encodedVotes encoded votes\\r\\n   * @param _voterAddress voter address\\r\\n   */\\r\\n  function vote(bytes[] calldata _encodedVotes, address _voterAddress) external virtual payable;\\r\\n}\\r\\n\",\"keccak256\":\"0x27299cc4f01d58c6215be344f4b374164199032fac4da2a651fdb6f2e3d12009\",\"license\":\"AGPL-3.0-only\"},\"contracts/votingStrategy/IVotingStrategyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IVotingStrategyFactory {\\r\\n    function initialize() external;\\r\\n\\r\\n    function updateVotingContract(\\r\\n        address newVotingContract\\r\\n    ) external;\\r\\n\\r\\n    function create() external returns (address);\\r\\n}\",\"keccak256\":\"0x391e71407a2bf5785f05c04124e5e55fe5ac0ad2023a2fda2df4f0b76ecfcf40\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613ca2806100206000396000f3fe6080604052600436106102765760003560e01c8063a67b1a0a1161014f578063d7bf7840116100c1578063f940e3851161007a578063f940e385146107ad578063fa1910e8146107cd578063fb5c8bfd146107ed578063fc0c546a1461080d578063fe169f761461082e578063ffa1ad741461083657600080fd5b8063d7bf7840146106f7578063d97f3dcf14610717578063dd4f8f7414610739578063dfefadff14610750578063e40205d61461077f578063f7f8ebca1461079657600080fd5b8063c5069b6111610113578063c5069b6114610633578063ca15c87314610660578063cce2df0314610680578063d195bba1146106a0578063d32cca47146106b7578063d547741f146106d757600080fd5b8063a67b1a0a14610578578063ac9650d814610598578063b02f18e7146105c5578063b9ff5ebe146105e5578063c03fd6621461060557600080fd5b8063685bd21b116101e85780638e421b85116101ac5780638e421b85146104a95780638e9745dc146104c95780639010d07c1461050357806391d14854146105235780639c3b68ce14610543578063a217fddf1461056357600080fd5b8063685bd21b14610420578063697e5f691461043557806376bacc99146104555780637aa54b68146104765780638926a8881461048957600080fd5b80632698f3fb1161023a5780632698f3fb1461036457806328ab75c7146103875780632f2ff15d146103a957806336568abe146103c957806344b278a6146103e9578063609679d81461040057600080fd5b806301ffc9a7146102825780630c0a56b6146102b757806310a11a6d146102ef5780631e949c9e1461031d578063248a9ca31461033457600080fd5b3661027d57005b600080fd5b34801561028e57600080fd5b506102a261029d366004612d11565b610874565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b5060ff546102d7906001600160a01b031681565b6040516001600160a01b0390911681526020016102ae565b3480156102fb57600080fd5b5061030f61030a366004612d3b565b61089f565b6040519081526020016102ae565b34801561032957600080fd5b5061030f6101015481565b34801561034057600080fd5b5061030f61034f366004612d5d565b60009081526065602052604090206001015490565b34801561037057600080fd5b506103796108d1565b6040516102ae929190612dc6565b34801561039357600080fd5b506103a76103a2366004612df3565b61096a565b005b3480156103b557600080fd5b506103a76103c4366004612e23565b610a0e565b3480156103d557600080fd5b506103a76103e4366004612e23565b610a38565b3480156103f557600080fd5b5061030f61010b5481565b34801561040c57600080fd5b5060fd546102d7906001600160a01b031681565b34801561042c57600080fd5b50610379610ab6565b34801561044157600080fd5b506103a7610450366004612d5d565b610acc565b34801561046157600080fd5b50610106546102d7906001600160a01b031681565b6103a7610484366004612f3b565b610b9f565b34801561049557600080fd5b506103a76104a436600461306a565b610c6a565b3480156104b557600080fd5b506103a76104c436600461309e565b610d05565b3480156104d557600080fd5b50610105546104ee90600160a01b900463ffffffff1681565b60405163ffffffff90911681526020016102ae565b34801561050f57600080fd5b506102d761051e366004612d3b565b611062565b34801561052f57600080fd5b506102a261053e366004612e23565b611081565b34801561054f57600080fd5b5060fb546102d7906001600160a01b031681565b34801561056f57600080fd5b5061030f600081565b34801561058457600080fd5b5060fc546102d7906001600160a01b031681565b3480156105a457600080fd5b506105b86105b33660046130d0565b6110ac565b6040516102ae9190613199565b3480156105d157600080fd5b506103a76105e03660046131ac565b61119e565b3480156105f157600080fd5b506103a76106003660046131f9565b611315565b34801561061157600080fd5b5061030f610620366004612d5d565b61010e6020526000908152604090205481565b34801561063f57600080fd5b5061065361064e366004612d5d565b61139f565b6040516102ae9190613216565b34801561066c57600080fd5b5061030f61067b366004612d5d565b611402565b34801561068c57600080fd5b506103a761069b36600461325a565b611419565b3480156106ac57600080fd5b5061030f6101005481565b3480156106c357600080fd5b5061030f6106d2366004612d5d565b611a3d565b3480156106e357600080fd5b506103a76106f2366004612e23565b611ae1565b34801561070357600080fd5b506103a761071236600461306a565b611b06565b34801561072357600080fd5b5061030f600080516020613c2683398151915281565b34801561074557600080fd5b5061030f6101025481565b34801561075c57600080fd5b5061077061076b366004612d5d565b611b9a565b6040516102ae939291906132fb565b34801561078b57600080fd5b5061030f6101035481565b3480156107a257600080fd5b5061030f6101045481565b3480156107b957600080fd5b506103a76107c8366004613323565b611c7b565b3480156107d957600080fd5b506103a76107e8366004613351565b611d10565b3480156107f957600080fd5b5060fe546102d7906001600160a01b031681565b34801561081957600080fd5b50610105546102d7906001600160a01b031681565b6103a7611de5565b34801561084257600080fd5b50610867604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516102ae91906133fb565b60006001600160e01b03198216635a05180f60e01b1480610899575061089982612261565b92915050565b61010d60205281600052604060002081815481106108bc57600080fd5b90600052602060002001600091509150505481565b610107805461010880549192916108e79061340e565b80601f01602080910402602001604051908101604052809291908181526020018280546109139061340e565b80156109605780601f1061093557610100808354040283529160200191610960565b820191906000526020600020905b81548152906001019060200180831161094357829003601f168201915b5050505050905082565b610103544211156109965760405162461bcd60e51b815260040161098d90613448565b60405180910390fd5b600080516020613c268339815191526109ae81612296565b610105805463ffffffff60a01b1916600160a01b63ffffffff8581168202929092179283905560405192041681527f94ef22170df1c9a0e250ce2eae5fd3abc6d1379de9f9855fee7e490f15ddda87906020015b60405180910390a15050565b600082815260656020526040902060010154610a2981612296565b610a3383836122a3565b505050565b6001600160a01b0381163314610aa85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161098d565b610ab282826122c5565b5050565b610109805461010a80549192916108e79061340e565b61010354421115610aef5760405162461bcd60e51b815260040161098d90613448565b600080516020613c26833981519152610b0781612296565b610104548211610b695760405162461bcd60e51b815260206004820152602760248201527f526f756e643a204c6573736572207468616e2063757272656e74206d6174636860448201526608185b5bdd5b9d60ca1b606482015260840161098d565b6101048290556040518281527f36407b7517f93b8dd6bf87384f27398dc6c7158776015e7492bbae639be60bdd90602001610a02565b426101025411158015610bb55750610103544211155b610c015760405162461bcd60e51b815260206004820152601a60248201527f526f756e643a20526f756e64206973206e6f7420616374697665000000000000604482015260640161098d565b60fe5460405163fc6d4e3960e01b81526001600160a01b039091169063fc6d4e39903490610c359085903390600401613478565b6000604051808303818588803b158015610c4e57600080fd5b505af1158015610c62573d6000803e3d6000fd5b505050505050565b61010354421115610c8d5760405162461bcd60e51b815260040161098d90613448565b600080516020613c26833981519152610ca581612296565b7ffd4633953debc7fbfababf529ffe33c4a6dd78c9ff13db552b571df08847864161010983604051610cd89291906134a2565b60405180910390a18151610109908155602083015183919061010a90610cfe908261358f565b5050505050565b61010354421115610d285760405162461bcd60e51b815260040161098d90613448565b600080516020613c26833981519152610d4081612296565b838510610daa5760405162461bcd60e51b815260206004820152603260248201527f526f756e643a204170706c69636174696f6e20656e64206973206265666f726560448201527108185c1c1b1a58d85d1a5bdb881cdd185c9d60721b606482015260840161098d565b818310610dc95760405162461bcd60e51b815260040161098d9061364e565b82851115610e305760405162461bcd60e51b815260206004820152602e60248201527f526f756e643a20526f756e64207374617274206973206265666f72652061707060448201526d1b1a58d85d1a5bdb881cdd185c9d60921b606482015260840161098d565b81841115610e935760405162461bcd60e51b815260206004820152602a60248201527f526f756e643a20526f756e6420656e64206973206265666f7265206170706c6960448201526918d85d1a5bdb88195b9960b21b606482015260840161098d565b84421115610ee35760405162461bcd60e51b815260206004820152601e60248201527f526f756e643a2054696d652068617320616c7265616479207061737365640000604482015260640161098d565b426101005410158015610ef95750610100548514155b15610f42576101005460408051918252602082018790527f1fde68e630df12a4f2baa029dd016929d2c6bccc0fdd80dec2a787b01035517e910160405180910390a16101008590555b426101015410158015610f585750610101548414155b15610fa1576101015460408051918252602082018690527fa7fbc7103523f0d44281a3a3ba5aa119e9cab30ae02c09932eb2524c7d81f463910160405180910390a16101018490555b426101025410158015610fb75750610102548314155b15611000576101025460408051918252602082018590527fbd905b0cf9e380e3eaf972d7cb542694f66361043fcce248341d90626d467476910160405180910390a16101028390555b4261010354101580156110165750610103548214155b15610cfe576101035460408051918252602082018490527fc0395d95a518149baa3521bb5b3c6988c7806a48ea42726ee3a9686bbd2a08cd910160405180910390a15061010355505050565b600082815260976020526040812061107a90836122e7565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b604080516000815260208101909152606090826001600160401b038111156110d6576110d6612e53565b60405190808252806020026020018201604052801561110957816020015b60608152602001906001900390816110f45790505b50915060005b83811015611196576111663086868481811061112d5761112d6136bd565b905060200281019061113f91906136d3565b8560405160200161115293929190613720565b6040516020818303038152906040526122f3565b838281518110611178576111786136bd565b6020026020010181905250808061118e90613747565b91505061110f565b505092915050565b4261010054111580156111b45750610101544211155b6112175760405162461bcd60e51b815260206004820152602e60248201527f526f756e643a204170706c69636174696f6e7320706572696f64206e6f74207360448201526d3a30b93a32b21037b91037bb32b960911b606482015260840161098d565b61010c604051806060016040528084815260200161010b5481526020018361123e90613760565b905281546001818101845560009384526020938490208351600490930201918255838301519082015560408201518051600283019081559381015192939192909190600384019061128f908261358f565b505050600084815261010d6020908152604080832061010b80548254600181018455928652939094200191909155905490518593507fca792622046325e9cd4e24b490cb000ef72acea3a15284efc14ee709307a5e0092506112f39190859061376c565b60405180910390a261010b805490600061130c83613747565b91905055505050565b610103544211156113385760405162461bcd60e51b815260040161098d90613448565b600080516020613c2683398151915261135081612296565b61010680546001600160a01b0319166001600160a01b0384169081179091556040519081527f88ae92ef8eb8a634a01f4e404d706ac67bc00a88bdf46af83630c6ade6e9795390602001610a02565b600081815261010d60209081526040918290208054835181840281018401909452808452606093928301828280156113f657602002820191906000526020600020905b8154815260200190600101908083116113e2575b50505050509050919050565b600081815260976020526040812061089990612318565b600054610100900460ff16158080156114395750600054600160ff909116105b806114535750303b158015611453575060005460ff166001145b6114b65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161098d565b6000805460ff1916600117905580156114d9576000805461ff0019166101001790555b6000808080808080806114ee8b8d018d61398e565b9750975097509750975097509750975042876000015110156115525760405162461bcd60e51b815260206004820152601e60248201527f526f756e643a2054696d652068617320616c7265616479207061737365640000604482015260640161098d565b86516020880151116115b15760405162461bcd60e51b815260206004820152602260248201527f526f756e643a2041707020656e64206973206265666f726520617070207374616044820152611c9d60f21b606482015260840161098d565b8660200151876060015110156116145760405162461bcd60e51b815260206004820152602260248201527f526f756e643a20526f756e6420656e64206973206265666f72652061707020656044820152611b9960f21b606482015260840161098d565b866040015187606001511161163b5760405162461bcd60e51b815260040161098d9061364e565b86516040880151101561169f5760405162461bcd60e51b815260206004820152602660248201527f526f756e643a20526f756e64207374617274206973206265666f726520617070604482015265081cdd185c9d60d21b606482015260840161098d565b60fb80546001600160a01b03808d166001600160a01b031992831617909255895160fc8054918416918316821790556020808c015160fd80549186169185169190911790558a51610100558a810151610101556040808c01516101025560608c0151610103556101058054958b1695909416949094179092558251633bf206a360e21b81529251909263efc81a8c92600480830193919282900301816000875af1158015611751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117759190613a82565b60fe80546001600160a01b0319166001600160a01b03929092169182179055604080516370e39c9560e11b8152905163e1c7392a9160048082019260009290919082900301818387803b1580156117cb57600080fd5b505af11580156117df573d6000803e3d6000fd5b5050505060fd60009054906101000a90046001600160a01b03166001600160a01b031663efc81a8c6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185c9190613a82565b60ff80546001600160a01b0319166001600160a01b03929092169182179055604080516370e39c9560e11b8152905163e1c7392a9160048082019260009290919082900301818387803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b50505061010487905550610105805463ffffffff60a01b1916600160a01b63ffffffff87160217905561010680546001600160a01b0319166001600160a01b03851617905581518051610107908155602082015161010890611928908261358f565b50505060208083015180516101099081559181015190919061010a9061194e908261358f565b5090505060005b8151518110156119975781518051611987916000918490811061197a5761197a6136bd565b60200260200101516122a3565b61199081613747565b9050611955565b5060005b8160200151518110156119e0576119d0600080516020613c268339815191528360200151838151811061197a5761197a6136bd565b6119d981613747565b905061199b565b506119e9612322565b50505050505050508015611a37576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b61010c546000908210611a9c5760405162461bcd60e51b815260206004820152602160248201527f526f756e643a204170706c69636174696f6e20646f6573206e6f7420657869736044820152601d60fa1b606482015260840161098d565b6000611aa9608084613ab5565b90506000611ab8608085613ac9565b611ac3906002613add565b600092835261010e60205260409092205490911c6003169392505050565b600082815260656020526040902060010154611afc81612296565b610a3383836122c5565b61010354421115611b295760405162461bcd60e51b815260040161098d90613448565b600080516020613c26833981519152611b4181612296565b7fb625c4faee7533bf09da813b9c0e169f98d36c22d9ce5181c9e4d7577556760a61010783604051611b749291906134a2565b60405180910390a18151610107908155602083015183919061010890610cfe908261358f565b61010c8181548110611bab57600080fd5b90600052602060002090600402016000915090508060000154908060010154908060020160405180604001604052908160008201548152602001600182018054611bf49061340e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c209061340e565b8015611c6d5780601f10611c4257610100808354040283529160200191611c6d565b820191906000526020600020905b815481529060010190602001808311611c5057829003601f168201915b505050505081525050905083565b600080516020613c26833981519152611c9381612296565b610105546001600160a01b0390811690841603611cfd5760405162461bcd60e51b815260206004820152602260248201527f526f756e643a2043616e6e6f7420776974686472617720726f756e6420746f6b60448201526132b760f11b606482015260840161098d565b610a3382611d0a8561238f565b85612413565b61010354421115611d335760405162461bcd60e51b815260040161098d90613448565b600080516020613c26833981519152611d4b81612296565b60005b8251811015610a33576000838281518110611d6b57611d6b6136bd565b60200260200101516000015190506000848381518110611d8d57611d8d6136bd565b602090810291909101810151810151600084815261010e909252604080832082905551909250829184917f5d498eb0ba08d4494201d7dd654e1f1c3e8a74dd0f860bb3c3e1b64eb79885c89190a35050600101611d4e565b610103544211611e375760405162461bcd60e51b815260206004820152601a60248201527f526f756e643a20526f756e6420686173206e6f7420656e646564000000000000604482015260640161098d565b600080516020613c26833981519152611e4f81612296565b61010554600090611e68906001600160a01b031661238f565b9050600060fb60009054906101000a90046001600160a01b03166001600160a01b031663918f86746040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee39190613af4565b62ffffff16905060008163ffffffff1660fb60009054906101000a90046001600160a01b03166001600160a01b0316638e50e5096040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6a9190613af4565b62ffffff1661010454611f7d9190613add565b611f879190613ab5565b905060008263ffffffff1661010560149054906101000a900463ffffffff1663ffffffff1661010454611fba9190613add565b611fc49190613ab5565b90506000818361010454611fd89190613b19565b611fe29190613b19565b9050808510156120405760405162461bcd60e51b815260206004820152602360248201527f526f756e643a204e6f7420656e6f7567682066756e647320696e20636f6e74726044820152621858dd60ea1b606482015260840161098d565b82156120d35760fb546040805163803db96d60e01b815290516000926001600160a01b03169163803db96d9160048083019260209291908290030181865afa158015612090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b49190613a82565b610105549091506120d190829086906001600160a01b0316612413565b505b81156120f95761010654610105546120f9916001600160a01b0390811691859116612413565b6101055461210f906001600160a01b031661238f565b610105549095506001600160a01b03166121915760ff60009054906101000a90046001600160a01b03166001600160a01b031663fe169f76866040518263ffffffff1660e01b81526004016000604051808303818588803b15801561217357600080fd5b505af1158015612187573d6000803e3d6000fd5b5050505050612218565b60ff54610105546121af916001600160a01b0391821691168761243b565b60ff60009054906101000a90046001600160a01b03166001600160a01b031663fe169f766040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156121ff57600080fd5b505af1158015612213573d6000803e3d6000fd5b505050505b60408051868152602081018590529081018390527fd3680093ec73f97fd84953765908e9ecbc0c567d97ee6e5465e742ace7b18bfc9060600160405180910390a1505050505050565b60006001600160e01b03198216637965db0b60e01b148061089957506301ffc9a760e01b6001600160e01b0319831614610899565b6122a0813361248d565b50565b6122ad82826124e6565b6000828152609760205260409020610a33908261256c565b6122cf8282612581565b6000828152609760205260409020610a3390826125e8565b600061107a83836125fd565b606061107a8383604051806060016040528060278152602001613c4660279139612627565b6000610899825490565b600054610100900460ff1661238d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161098d565b565b60006001600160a01b0382166123a6575047919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156123ea573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190613b2c565b919050565b6001600160a01b03811661242b57610a33838361269f565b610a336001600160a01b03821684845b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a339084906127b8565b6124978282611081565b610ab2576124a48161288d565b6124af83602061289f565b6040516020016124c0929190613b45565b60408051601f198184030181529082905262461bcd60e51b825261098d916004016133fb565b6124f08282611081565b610ab25760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556125283390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061107a836001600160a01b038416612a3a565b61258b8282611081565b15610ab25760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061107a836001600160a01b038416612a89565b6000826000018281548110612614576126146136bd565b9060005260206000200154905092915050565b6060600080856001600160a01b0316856040516126449190613bba565b600060405180830381855af49150503d806000811461267f576040519150601f19603f3d011682016040523d82523d6000602084013e612684565b606091505b509150915061269586838387612b7c565b9695505050505050565b804710156126ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161098d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461273c576040519150601f19603f3d011682016040523d82523d6000602084013e612741565b606091505b5050905080610a335760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161098d565b600061280d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612bfd9092919063ffffffff16565b905080516000148061282e57508080602001905181019061282e9190613bd6565b610a335760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161098d565b60606108996001600160a01b03831660145b606060006128ae836002613add565b6128b9906002613b19565b6001600160401b038111156128d0576128d0612e53565b6040519080825280601f01601f1916602001820160405280156128fa576020820181803683370190505b509050600360fc1b81600081518110612915576129156136bd565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612944576129446136bd565b60200101906001600160f81b031916908160001a9053506000612968846002613add565b612973906001613b19565b90505b60018111156129eb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106129a7576129a76136bd565b1a60f81b8282815181106129bd576129bd6136bd565b60200101906001600160f81b031916908160001a90535060049490941c936129e481613bf8565b9050612976565b50831561107a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161098d565b6000818152600183016020526040812054612a8157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610899565b506000610899565b60008181526001830160205260408120548015612b72576000612aad6001836136aa565b8554909150600090612ac1906001906136aa565b9050818114612b26576000866000018281548110612ae157612ae16136bd565b9060005260206000200154905080876000018481548110612b0457612b046136bd565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612b3757612b37613c0f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610899565b6000915050610899565b60608315612beb578251600003612be4576001600160a01b0385163b612be45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161098d565b5081612bf5565b612bf58383612c0c565b949350505050565b6060612bf58484600085612c36565b815115612c1c5781518083602001fd5b8060405162461bcd60e51b815260040161098d91906133fb565b606082471015612c975760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161098d565b600080866001600160a01b03168587604051612cb39190613bba565b60006040518083038185875af1925050503d8060008114612cf0576040519150601f19603f3d011682016040523d82523d6000602084013e612cf5565b606091505b5091509150612d0687838387612b7c565b979650505050505050565b600060208284031215612d2357600080fd5b81356001600160e01b03198116811461107a57600080fd5b60008060408385031215612d4e57600080fd5b50508035926020909101359150565b600060208284031215612d6f57600080fd5b5035919050565b60005b83811015612d91578181015183820152602001612d79565b50506000910152565b60008151808452612db2816020860160208601612d76565b601f01601f19169290920160200192915050565b828152604060208201526000612bf56040830184612d9a565b803563ffffffff8116811461240e57600080fd5b600060208284031215612e0557600080fd5b61107a82612ddf565b6001600160a01b03811681146122a057600080fd5b60008060408385031215612e3657600080fd5b823591506020830135612e4881612e0e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612e8b57612e8b612e53565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612eb957612eb9612e53565b604052919050565b60006001600160401b03821115612eda57612eda612e53565b5060051b60200190565b60006001600160401b03831115612efd57612efd612e53565b612f10601f8401601f1916602001612e91565b9050828152838383011115612f2457600080fd5b828260208301376000602084830101529392505050565b60006020808385031215612f4e57600080fd5b82356001600160401b0380821115612f6557600080fd5b818501915085601f830112612f7957600080fd5b8135612f8c612f8782612ec1565b612e91565b81815260059190911b83018401908481019088831115612fab57600080fd5b8585015b83811015612ff857803585811115612fc75760008081fd5b8601603f81018b13612fd95760008081fd5b612fea8b8983013560408401612ee4565b845250918601918601612faf565b5098975050505050505050565b60006040828403121561301757600080fd5b61301f612e69565b90508135815260208201356001600160401b0381111561303e57600080fd5b8201601f8101841361304f57600080fd5b61305e84823560208401612ee4565b60208301525092915050565b60006020828403121561307c57600080fd5b81356001600160401b0381111561309257600080fd5b612bf584828501613005565b600080600080608085870312156130b457600080fd5b5050823594602084013594506040840135936060013592509050565b600080602083850312156130e357600080fd5b82356001600160401b03808211156130fa57600080fd5b818501915085601f83011261310e57600080fd5b81358181111561311d57600080fd5b8660208260051b850101111561313257600080fd5b60209290920196919550909350505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561318c57828403895261317a848351612d9a565b98850198935090840190600101613162565b5091979650505050505050565b60208152600061107a6020830184613144565b600080604083850312156131bf57600080fd5b8235915060208301356001600160401b038111156131dc57600080fd5b830160408186031215612e4857600080fd5b803561240e81612e0e565b60006020828403121561320b57600080fd5b813561107a81612e0e565b6020808252825182820181905260009190848201906040850190845b8181101561324e57835183529284019291840191600101613232565b50909695505050505050565b60008060006040848603121561326f57600080fd5b83356001600160401b038082111561328657600080fd5b818601915086601f83011261329a57600080fd5b8135818111156132a957600080fd5b8760208285010111156132bb57600080fd5b602092830195509350508401356132d181612e0e565b809150509250925092565b805182526000602082015160406020850152612bf56040850182612d9a565b83815282602082015260606040820152600061331a60608301846132dc565b95945050505050565b6000806040838503121561333657600080fd5b823561334181612e0e565b91506020830135612e4881612e0e565b6000602080838503121561336457600080fd5b82356001600160401b0381111561337a57600080fd5b8301601f8101851361338b57600080fd5b8035613399612f8782612ec1565b81815260069190911b820183019083810190878311156133b857600080fd5b928401925b82841015612d0657604084890312156133d65760008081fd5b6133de612e69565b8435815285850135868201528252604090930192908401906133bd565b60208152600061107a6020830184612d9a565b600181811c9082168061342257607f821691505b60208210810361344257634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260169082015275149bdd5b990e88149bdd5b99081a185cc8195b99195960521b604082015260600190565b60408152600061348b6040830185613144565b905060018060a01b03831660208301529392505050565b60408152825460408201526000600180850160406060850152600081546134c88161340e565b80608088015260a0858316600081146134e8576001811461350257613533565b60ff1984168983015282151560051b890182019450613533565b8560005260208060002060005b8581101561352a5781548c820186015290890190820161350f565b8b018401965050505b505050508481036020860152612d0681876132dc565b601f821115610a3357600081815260208120601f850160051c810160208610156135705750805b601f850160051c820191505b81811015610c625782815560010161357c565b81516001600160401b038111156135a8576135a8612e53565b6135bc816135b6845461340e565b84613549565b602080601f8311600181146135f157600084156135d95750858301515b600019600386901b1c1916600185901b178555610c62565b600085815260208120601f198616915b8281101561362057888601518255948401946001909101908401613601565b508582101561363e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526026908201527f526f756e643a20526f756e6420656e64206973206265666f726520726f756e64604082015265081cdd185c9d60d21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561089957610899613694565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126136ea57600080fd5b8301803591506001600160401b0382111561370457600080fd5b60200191503681900382131561371957600080fd5b9250929050565b82848237600083820160008152835161373d818360208801612d76565b0195945050505050565b60006001820161375957613759613694565b5060010190565b60006108993683613005565b828152604060208201528135604082015260006020830135601e1984360301811261379657600080fd5b83016020810190356001600160401b038111156137b257600080fd5b8036038213156137c157600080fd5b60406060850152806080850152808260a0860137600060a0828601015260a0601f19601f830116850101925050509392505050565b60006080828403121561380857600080fd5b604051608081018181106001600160401b038211171561382a5761382a612e53565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006040828403121561386d57600080fd5b613875612e69565b905081356001600160401b038082111561388e57600080fd5b61389a85838601613005565b835260208401359150808211156138b057600080fd5b5061305e84828501613005565b600082601f8301126138ce57600080fd5b813560206138de612f8783612ec1565b82815260059290921b840181019181810190868411156138fd57600080fd5b8286015b8481101561392157803561391481612e0e565b8352918301918301613901565b509695505050505050565b60006040828403121561393e57600080fd5b613946612e69565b905081356001600160401b038082111561395f57600080fd5b61396b858386016138bd565b8352602084013591508082111561398157600080fd5b5061305e848285016138bd565b600080600080600080600080888a036101808112156139ac57600080fd5b60408112156139ba57600080fd5b506139c3612e69565b89356139ce81612e0e565b815260208a01356139de81612e0e565b602082015297506139f28a60408b016137f6565b965060c08901359550613a0760e08a016131ee565b9450613a166101008a01612ddf565b9350613a256101208a016131ee565b92506101408901356001600160401b0380821115613a4257600080fd5b613a4e8c838d0161385b565b93506101608b0135915080821115613a6557600080fd5b50613a728b828c0161392c565b9150509295985092959890939650565b600060208284031215613a9457600080fd5b815161107a81612e0e565b634e487b7160e01b600052601260045260246000fd5b600082613ac457613ac4613a9f565b500490565b600082613ad857613ad8613a9f565b500690565b808202811582820484141761089957610899613694565b600060208284031215613b0657600080fd5b815162ffffff8116811461107a57600080fd5b8082018082111561089957610899613694565b600060208284031215613b3e57600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613b7d816017850160208801612d76565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613bae816028840160208801612d76565b01602801949350505050565b60008251613bcc818460208701612d76565b9190910192915050565b600060208284031215613be857600080fd5b8151801515811461107a57600080fd5b600081613c0757613c07613694565b506000190190565b634e487b7160e01b600052603160045260246000fdfeec61da14b5abbac5c5fda6f1d57642a264ebd5d0674f35852829746dfb8174a5416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204522b245bff1f1d3dd65bcfed8c21aadc4d3320e4fd635c7cd41318d5f8d124864736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102765760003560e01c8063a67b1a0a1161014f578063d7bf7840116100c1578063f940e3851161007a578063f940e385146107ad578063fa1910e8146107cd578063fb5c8bfd146107ed578063fc0c546a1461080d578063fe169f761461082e578063ffa1ad741461083657600080fd5b8063d7bf7840146106f7578063d97f3dcf14610717578063dd4f8f7414610739578063dfefadff14610750578063e40205d61461077f578063f7f8ebca1461079657600080fd5b8063c5069b6111610113578063c5069b6114610633578063ca15c87314610660578063cce2df0314610680578063d195bba1146106a0578063d32cca47146106b7578063d547741f146106d757600080fd5b8063a67b1a0a14610578578063ac9650d814610598578063b02f18e7146105c5578063b9ff5ebe146105e5578063c03fd6621461060557600080fd5b8063685bd21b116101e85780638e421b85116101ac5780638e421b85146104a95780638e9745dc146104c95780639010d07c1461050357806391d14854146105235780639c3b68ce14610543578063a217fddf1461056357600080fd5b8063685bd21b14610420578063697e5f691461043557806376bacc99146104555780637aa54b68146104765780638926a8881461048957600080fd5b80632698f3fb1161023a5780632698f3fb1461036457806328ab75c7146103875780632f2ff15d146103a957806336568abe146103c957806344b278a6146103e9578063609679d81461040057600080fd5b806301ffc9a7146102825780630c0a56b6146102b757806310a11a6d146102ef5780631e949c9e1461031d578063248a9ca31461033457600080fd5b3661027d57005b600080fd5b34801561028e57600080fd5b506102a261029d366004612d11565b610874565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b5060ff546102d7906001600160a01b031681565b6040516001600160a01b0390911681526020016102ae565b3480156102fb57600080fd5b5061030f61030a366004612d3b565b61089f565b6040519081526020016102ae565b34801561032957600080fd5b5061030f6101015481565b34801561034057600080fd5b5061030f61034f366004612d5d565b60009081526065602052604090206001015490565b34801561037057600080fd5b506103796108d1565b6040516102ae929190612dc6565b34801561039357600080fd5b506103a76103a2366004612df3565b61096a565b005b3480156103b557600080fd5b506103a76103c4366004612e23565b610a0e565b3480156103d557600080fd5b506103a76103e4366004612e23565b610a38565b3480156103f557600080fd5b5061030f61010b5481565b34801561040c57600080fd5b5060fd546102d7906001600160a01b031681565b34801561042c57600080fd5b50610379610ab6565b34801561044157600080fd5b506103a7610450366004612d5d565b610acc565b34801561046157600080fd5b50610106546102d7906001600160a01b031681565b6103a7610484366004612f3b565b610b9f565b34801561049557600080fd5b506103a76104a436600461306a565b610c6a565b3480156104b557600080fd5b506103a76104c436600461309e565b610d05565b3480156104d557600080fd5b50610105546104ee90600160a01b900463ffffffff1681565b60405163ffffffff90911681526020016102ae565b34801561050f57600080fd5b506102d761051e366004612d3b565b611062565b34801561052f57600080fd5b506102a261053e366004612e23565b611081565b34801561054f57600080fd5b5060fb546102d7906001600160a01b031681565b34801561056f57600080fd5b5061030f600081565b34801561058457600080fd5b5060fc546102d7906001600160a01b031681565b3480156105a457600080fd5b506105b86105b33660046130d0565b6110ac565b6040516102ae9190613199565b3480156105d157600080fd5b506103a76105e03660046131ac565b61119e565b3480156105f157600080fd5b506103a76106003660046131f9565b611315565b34801561061157600080fd5b5061030f610620366004612d5d565b61010e6020526000908152604090205481565b34801561063f57600080fd5b5061065361064e366004612d5d565b61139f565b6040516102ae9190613216565b34801561066c57600080fd5b5061030f61067b366004612d5d565b611402565b34801561068c57600080fd5b506103a761069b36600461325a565b611419565b3480156106ac57600080fd5b5061030f6101005481565b3480156106c357600080fd5b5061030f6106d2366004612d5d565b611a3d565b3480156106e357600080fd5b506103a76106f2366004612e23565b611ae1565b34801561070357600080fd5b506103a761071236600461306a565b611b06565b34801561072357600080fd5b5061030f600080516020613c2683398151915281565b34801561074557600080fd5b5061030f6101025481565b34801561075c57600080fd5b5061077061076b366004612d5d565b611b9a565b6040516102ae939291906132fb565b34801561078b57600080fd5b5061030f6101035481565b3480156107a257600080fd5b5061030f6101045481565b3480156107b957600080fd5b506103a76107c8366004613323565b611c7b565b3480156107d957600080fd5b506103a76107e8366004613351565b611d10565b3480156107f957600080fd5b5060fe546102d7906001600160a01b031681565b34801561081957600080fd5b50610105546102d7906001600160a01b031681565b6103a7611de5565b34801561084257600080fd5b50610867604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516102ae91906133fb565b60006001600160e01b03198216635a05180f60e01b1480610899575061089982612261565b92915050565b61010d60205281600052604060002081815481106108bc57600080fd5b90600052602060002001600091509150505481565b610107805461010880549192916108e79061340e565b80601f01602080910402602001604051908101604052809291908181526020018280546109139061340e565b80156109605780601f1061093557610100808354040283529160200191610960565b820191906000526020600020905b81548152906001019060200180831161094357829003601f168201915b5050505050905082565b610103544211156109965760405162461bcd60e51b815260040161098d90613448565b60405180910390fd5b600080516020613c268339815191526109ae81612296565b610105805463ffffffff60a01b1916600160a01b63ffffffff8581168202929092179283905560405192041681527f94ef22170df1c9a0e250ce2eae5fd3abc6d1379de9f9855fee7e490f15ddda87906020015b60405180910390a15050565b600082815260656020526040902060010154610a2981612296565b610a3383836122a3565b505050565b6001600160a01b0381163314610aa85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161098d565b610ab282826122c5565b5050565b610109805461010a80549192916108e79061340e565b61010354421115610aef5760405162461bcd60e51b815260040161098d90613448565b600080516020613c26833981519152610b0781612296565b610104548211610b695760405162461bcd60e51b815260206004820152602760248201527f526f756e643a204c6573736572207468616e2063757272656e74206d6174636860448201526608185b5bdd5b9d60ca1b606482015260840161098d565b6101048290556040518281527f36407b7517f93b8dd6bf87384f27398dc6c7158776015e7492bbae639be60bdd90602001610a02565b426101025411158015610bb55750610103544211155b610c015760405162461bcd60e51b815260206004820152601a60248201527f526f756e643a20526f756e64206973206e6f7420616374697665000000000000604482015260640161098d565b60fe5460405163fc6d4e3960e01b81526001600160a01b039091169063fc6d4e39903490610c359085903390600401613478565b6000604051808303818588803b158015610c4e57600080fd5b505af1158015610c62573d6000803e3d6000fd5b505050505050565b61010354421115610c8d5760405162461bcd60e51b815260040161098d90613448565b600080516020613c26833981519152610ca581612296565b7ffd4633953debc7fbfababf529ffe33c4a6dd78c9ff13db552b571df08847864161010983604051610cd89291906134a2565b60405180910390a18151610109908155602083015183919061010a90610cfe908261358f565b5050505050565b61010354421115610d285760405162461bcd60e51b815260040161098d90613448565b600080516020613c26833981519152610d4081612296565b838510610daa5760405162461bcd60e51b815260206004820152603260248201527f526f756e643a204170706c69636174696f6e20656e64206973206265666f726560448201527108185c1c1b1a58d85d1a5bdb881cdd185c9d60721b606482015260840161098d565b818310610dc95760405162461bcd60e51b815260040161098d9061364e565b82851115610e305760405162461bcd60e51b815260206004820152602e60248201527f526f756e643a20526f756e64207374617274206973206265666f72652061707060448201526d1b1a58d85d1a5bdb881cdd185c9d60921b606482015260840161098d565b81841115610e935760405162461bcd60e51b815260206004820152602a60248201527f526f756e643a20526f756e6420656e64206973206265666f7265206170706c6960448201526918d85d1a5bdb88195b9960b21b606482015260840161098d565b84421115610ee35760405162461bcd60e51b815260206004820152601e60248201527f526f756e643a2054696d652068617320616c7265616479207061737365640000604482015260640161098d565b426101005410158015610ef95750610100548514155b15610f42576101005460408051918252602082018790527f1fde68e630df12a4f2baa029dd016929d2c6bccc0fdd80dec2a787b01035517e910160405180910390a16101008590555b426101015410158015610f585750610101548414155b15610fa1576101015460408051918252602082018690527fa7fbc7103523f0d44281a3a3ba5aa119e9cab30ae02c09932eb2524c7d81f463910160405180910390a16101018490555b426101025410158015610fb75750610102548314155b15611000576101025460408051918252602082018590527fbd905b0cf9e380e3eaf972d7cb542694f66361043fcce248341d90626d467476910160405180910390a16101028390555b4261010354101580156110165750610103548214155b15610cfe576101035460408051918252602082018490527fc0395d95a518149baa3521bb5b3c6988c7806a48ea42726ee3a9686bbd2a08cd910160405180910390a15061010355505050565b600082815260976020526040812061107a90836122e7565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b604080516000815260208101909152606090826001600160401b038111156110d6576110d6612e53565b60405190808252806020026020018201604052801561110957816020015b60608152602001906001900390816110f45790505b50915060005b83811015611196576111663086868481811061112d5761112d6136bd565b905060200281019061113f91906136d3565b8560405160200161115293929190613720565b6040516020818303038152906040526122f3565b838281518110611178576111786136bd565b6020026020010181905250808061118e90613747565b91505061110f565b505092915050565b4261010054111580156111b45750610101544211155b6112175760405162461bcd60e51b815260206004820152602e60248201527f526f756e643a204170706c69636174696f6e7320706572696f64206e6f74207360448201526d3a30b93a32b21037b91037bb32b960911b606482015260840161098d565b61010c604051806060016040528084815260200161010b5481526020018361123e90613760565b905281546001818101845560009384526020938490208351600490930201918255838301519082015560408201518051600283019081559381015192939192909190600384019061128f908261358f565b505050600084815261010d6020908152604080832061010b80548254600181018455928652939094200191909155905490518593507fca792622046325e9cd4e24b490cb000ef72acea3a15284efc14ee709307a5e0092506112f39190859061376c565b60405180910390a261010b805490600061130c83613747565b91905055505050565b610103544211156113385760405162461bcd60e51b815260040161098d90613448565b600080516020613c2683398151915261135081612296565b61010680546001600160a01b0319166001600160a01b0384169081179091556040519081527f88ae92ef8eb8a634a01f4e404d706ac67bc00a88bdf46af83630c6ade6e9795390602001610a02565b600081815261010d60209081526040918290208054835181840281018401909452808452606093928301828280156113f657602002820191906000526020600020905b8154815260200190600101908083116113e2575b50505050509050919050565b600081815260976020526040812061089990612318565b600054610100900460ff16158080156114395750600054600160ff909116105b806114535750303b158015611453575060005460ff166001145b6114b65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161098d565b6000805460ff1916600117905580156114d9576000805461ff0019166101001790555b6000808080808080806114ee8b8d018d61398e565b9750975097509750975097509750975042876000015110156115525760405162461bcd60e51b815260206004820152601e60248201527f526f756e643a2054696d652068617320616c7265616479207061737365640000604482015260640161098d565b86516020880151116115b15760405162461bcd60e51b815260206004820152602260248201527f526f756e643a2041707020656e64206973206265666f726520617070207374616044820152611c9d60f21b606482015260840161098d565b8660200151876060015110156116145760405162461bcd60e51b815260206004820152602260248201527f526f756e643a20526f756e6420656e64206973206265666f72652061707020656044820152611b9960f21b606482015260840161098d565b866040015187606001511161163b5760405162461bcd60e51b815260040161098d9061364e565b86516040880151101561169f5760405162461bcd60e51b815260206004820152602660248201527f526f756e643a20526f756e64207374617274206973206265666f726520617070604482015265081cdd185c9d60d21b606482015260840161098d565b60fb80546001600160a01b03808d166001600160a01b031992831617909255895160fc8054918416918316821790556020808c015160fd80549186169185169190911790558a51610100558a810151610101556040808c01516101025560608c0151610103556101058054958b1695909416949094179092558251633bf206a360e21b81529251909263efc81a8c92600480830193919282900301816000875af1158015611751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117759190613a82565b60fe80546001600160a01b0319166001600160a01b03929092169182179055604080516370e39c9560e11b8152905163e1c7392a9160048082019260009290919082900301818387803b1580156117cb57600080fd5b505af11580156117df573d6000803e3d6000fd5b5050505060fd60009054906101000a90046001600160a01b03166001600160a01b031663efc81a8c6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185c9190613a82565b60ff80546001600160a01b0319166001600160a01b03929092169182179055604080516370e39c9560e11b8152905163e1c7392a9160048082019260009290919082900301818387803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b50505061010487905550610105805463ffffffff60a01b1916600160a01b63ffffffff87160217905561010680546001600160a01b0319166001600160a01b03851617905581518051610107908155602082015161010890611928908261358f565b50505060208083015180516101099081559181015190919061010a9061194e908261358f565b5090505060005b8151518110156119975781518051611987916000918490811061197a5761197a6136bd565b60200260200101516122a3565b61199081613747565b9050611955565b5060005b8160200151518110156119e0576119d0600080516020613c268339815191528360200151838151811061197a5761197a6136bd565b6119d981613747565b905061199b565b506119e9612322565b50505050505050508015611a37576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b61010c546000908210611a9c5760405162461bcd60e51b815260206004820152602160248201527f526f756e643a204170706c69636174696f6e20646f6573206e6f7420657869736044820152601d60fa1b606482015260840161098d565b6000611aa9608084613ab5565b90506000611ab8608085613ac9565b611ac3906002613add565b600092835261010e60205260409092205490911c6003169392505050565b600082815260656020526040902060010154611afc81612296565b610a3383836122c5565b61010354421115611b295760405162461bcd60e51b815260040161098d90613448565b600080516020613c26833981519152611b4181612296565b7fb625c4faee7533bf09da813b9c0e169f98d36c22d9ce5181c9e4d7577556760a61010783604051611b749291906134a2565b60405180910390a18151610107908155602083015183919061010890610cfe908261358f565b61010c8181548110611bab57600080fd5b90600052602060002090600402016000915090508060000154908060010154908060020160405180604001604052908160008201548152602001600182018054611bf49061340e565b80601f0160208091040260200160405190810160405280929190818152602001828054611c209061340e565b8015611c6d5780601f10611c4257610100808354040283529160200191611c6d565b820191906000526020600020905b815481529060010190602001808311611c5057829003601f168201915b505050505081525050905083565b600080516020613c26833981519152611c9381612296565b610105546001600160a01b0390811690841603611cfd5760405162461bcd60e51b815260206004820152602260248201527f526f756e643a2043616e6e6f7420776974686472617720726f756e6420746f6b60448201526132b760f11b606482015260840161098d565b610a3382611d0a8561238f565b85612413565b61010354421115611d335760405162461bcd60e51b815260040161098d90613448565b600080516020613c26833981519152611d4b81612296565b60005b8251811015610a33576000838281518110611d6b57611d6b6136bd565b60200260200101516000015190506000848381518110611d8d57611d8d6136bd565b602090810291909101810151810151600084815261010e909252604080832082905551909250829184917f5d498eb0ba08d4494201d7dd654e1f1c3e8a74dd0f860bb3c3e1b64eb79885c89190a35050600101611d4e565b610103544211611e375760405162461bcd60e51b815260206004820152601a60248201527f526f756e643a20526f756e6420686173206e6f7420656e646564000000000000604482015260640161098d565b600080516020613c26833981519152611e4f81612296565b61010554600090611e68906001600160a01b031661238f565b9050600060fb60009054906101000a90046001600160a01b03166001600160a01b031663918f86746040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ebf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee39190613af4565b62ffffff16905060008163ffffffff1660fb60009054906101000a90046001600160a01b03166001600160a01b0316638e50e5096040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6a9190613af4565b62ffffff1661010454611f7d9190613add565b611f879190613ab5565b905060008263ffffffff1661010560149054906101000a900463ffffffff1663ffffffff1661010454611fba9190613add565b611fc49190613ab5565b90506000818361010454611fd89190613b19565b611fe29190613b19565b9050808510156120405760405162461bcd60e51b815260206004820152602360248201527f526f756e643a204e6f7420656e6f7567682066756e647320696e20636f6e74726044820152621858dd60ea1b606482015260840161098d565b82156120d35760fb546040805163803db96d60e01b815290516000926001600160a01b03169163803db96d9160048083019260209291908290030181865afa158015612090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b49190613a82565b610105549091506120d190829086906001600160a01b0316612413565b505b81156120f95761010654610105546120f9916001600160a01b0390811691859116612413565b6101055461210f906001600160a01b031661238f565b610105549095506001600160a01b03166121915760ff60009054906101000a90046001600160a01b03166001600160a01b031663fe169f76866040518263ffffffff1660e01b81526004016000604051808303818588803b15801561217357600080fd5b505af1158015612187573d6000803e3d6000fd5b5050505050612218565b60ff54610105546121af916001600160a01b0391821691168761243b565b60ff60009054906101000a90046001600160a01b03166001600160a01b031663fe169f766040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156121ff57600080fd5b505af1158015612213573d6000803e3d6000fd5b505050505b60408051868152602081018590529081018390527fd3680093ec73f97fd84953765908e9ecbc0c567d97ee6e5465e742ace7b18bfc9060600160405180910390a1505050505050565b60006001600160e01b03198216637965db0b60e01b148061089957506301ffc9a760e01b6001600160e01b0319831614610899565b6122a0813361248d565b50565b6122ad82826124e6565b6000828152609760205260409020610a33908261256c565b6122cf8282612581565b6000828152609760205260409020610a3390826125e8565b600061107a83836125fd565b606061107a8383604051806060016040528060278152602001613c4660279139612627565b6000610899825490565b600054610100900460ff1661238d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161098d565b565b60006001600160a01b0382166123a6575047919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156123ea573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190613b2c565b919050565b6001600160a01b03811661242b57610a33838361269f565b610a336001600160a01b03821684845b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a339084906127b8565b6124978282611081565b610ab2576124a48161288d565b6124af83602061289f565b6040516020016124c0929190613b45565b60408051601f198184030181529082905262461bcd60e51b825261098d916004016133fb565b6124f08282611081565b610ab25760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556125283390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061107a836001600160a01b038416612a3a565b61258b8282611081565b15610ab25760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061107a836001600160a01b038416612a89565b6000826000018281548110612614576126146136bd565b9060005260206000200154905092915050565b6060600080856001600160a01b0316856040516126449190613bba565b600060405180830381855af49150503d806000811461267f576040519150601f19603f3d011682016040523d82523d6000602084013e612684565b606091505b509150915061269586838387612b7c565b9695505050505050565b804710156126ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161098d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461273c576040519150601f19603f3d011682016040523d82523d6000602084013e612741565b606091505b5050905080610a335760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161098d565b600061280d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612bfd9092919063ffffffff16565b905080516000148061282e57508080602001905181019061282e9190613bd6565b610a335760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161098d565b60606108996001600160a01b03831660145b606060006128ae836002613add565b6128b9906002613b19565b6001600160401b038111156128d0576128d0612e53565b6040519080825280601f01601f1916602001820160405280156128fa576020820181803683370190505b509050600360fc1b81600081518110612915576129156136bd565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612944576129446136bd565b60200101906001600160f81b031916908160001a9053506000612968846002613add565b612973906001613b19565b90505b60018111156129eb576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106129a7576129a76136bd565b1a60f81b8282815181106129bd576129bd6136bd565b60200101906001600160f81b031916908160001a90535060049490941c936129e481613bf8565b9050612976565b50831561107a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161098d565b6000818152600183016020526040812054612a8157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610899565b506000610899565b60008181526001830160205260408120548015612b72576000612aad6001836136aa565b8554909150600090612ac1906001906136aa565b9050818114612b26576000866000018281548110612ae157612ae16136bd565b9060005260206000200154905080876000018481548110612b0457612b046136bd565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612b3757612b37613c0f565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610899565b6000915050610899565b60608315612beb578251600003612be4576001600160a01b0385163b612be45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161098d565b5081612bf5565b612bf58383612c0c565b949350505050565b6060612bf58484600085612c36565b815115612c1c5781518083602001fd5b8060405162461bcd60e51b815260040161098d91906133fb565b606082471015612c975760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161098d565b600080866001600160a01b03168587604051612cb39190613bba565b60006040518083038185875af1925050503d8060008114612cf0576040519150601f19603f3d011682016040523d82523d6000602084013e612cf5565b606091505b5091509150612d0687838387612b7c565b979650505050505050565b600060208284031215612d2357600080fd5b81356001600160e01b03198116811461107a57600080fd5b60008060408385031215612d4e57600080fd5b50508035926020909101359150565b600060208284031215612d6f57600080fd5b5035919050565b60005b83811015612d91578181015183820152602001612d79565b50506000910152565b60008151808452612db2816020860160208601612d76565b601f01601f19169290920160200192915050565b828152604060208201526000612bf56040830184612d9a565b803563ffffffff8116811461240e57600080fd5b600060208284031215612e0557600080fd5b61107a82612ddf565b6001600160a01b03811681146122a057600080fd5b60008060408385031215612e3657600080fd5b823591506020830135612e4881612e0e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715612e8b57612e8b612e53565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612eb957612eb9612e53565b604052919050565b60006001600160401b03821115612eda57612eda612e53565b5060051b60200190565b60006001600160401b03831115612efd57612efd612e53565b612f10601f8401601f1916602001612e91565b9050828152838383011115612f2457600080fd5b828260208301376000602084830101529392505050565b60006020808385031215612f4e57600080fd5b82356001600160401b0380821115612f6557600080fd5b818501915085601f830112612f7957600080fd5b8135612f8c612f8782612ec1565b612e91565b81815260059190911b83018401908481019088831115612fab57600080fd5b8585015b83811015612ff857803585811115612fc75760008081fd5b8601603f81018b13612fd95760008081fd5b612fea8b8983013560408401612ee4565b845250918601918601612faf565b5098975050505050505050565b60006040828403121561301757600080fd5b61301f612e69565b90508135815260208201356001600160401b0381111561303e57600080fd5b8201601f8101841361304f57600080fd5b61305e84823560208401612ee4565b60208301525092915050565b60006020828403121561307c57600080fd5b81356001600160401b0381111561309257600080fd5b612bf584828501613005565b600080600080608085870312156130b457600080fd5b5050823594602084013594506040840135936060013592509050565b600080602083850312156130e357600080fd5b82356001600160401b03808211156130fa57600080fd5b818501915085601f83011261310e57600080fd5b81358181111561311d57600080fd5b8660208260051b850101111561313257600080fd5b60209290920196919550909350505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561318c57828403895261317a848351612d9a565b98850198935090840190600101613162565b5091979650505050505050565b60208152600061107a6020830184613144565b600080604083850312156131bf57600080fd5b8235915060208301356001600160401b038111156131dc57600080fd5b830160408186031215612e4857600080fd5b803561240e81612e0e565b60006020828403121561320b57600080fd5b813561107a81612e0e565b6020808252825182820181905260009190848201906040850190845b8181101561324e57835183529284019291840191600101613232565b50909695505050505050565b60008060006040848603121561326f57600080fd5b83356001600160401b038082111561328657600080fd5b818601915086601f83011261329a57600080fd5b8135818111156132a957600080fd5b8760208285010111156132bb57600080fd5b602092830195509350508401356132d181612e0e565b809150509250925092565b805182526000602082015160406020850152612bf56040850182612d9a565b83815282602082015260606040820152600061331a60608301846132dc565b95945050505050565b6000806040838503121561333657600080fd5b823561334181612e0e565b91506020830135612e4881612e0e565b6000602080838503121561336457600080fd5b82356001600160401b0381111561337a57600080fd5b8301601f8101851361338b57600080fd5b8035613399612f8782612ec1565b81815260069190911b820183019083810190878311156133b857600080fd5b928401925b82841015612d0657604084890312156133d65760008081fd5b6133de612e69565b8435815285850135868201528252604090930192908401906133bd565b60208152600061107a6020830184612d9a565b600181811c9082168061342257607f821691505b60208210810361344257634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260169082015275149bdd5b990e88149bdd5b99081a185cc8195b99195960521b604082015260600190565b60408152600061348b6040830185613144565b905060018060a01b03831660208301529392505050565b60408152825460408201526000600180850160406060850152600081546134c88161340e565b80608088015260a0858316600081146134e8576001811461350257613533565b60ff1984168983015282151560051b890182019450613533565b8560005260208060002060005b8581101561352a5781548c820186015290890190820161350f565b8b018401965050505b505050508481036020860152612d0681876132dc565b601f821115610a3357600081815260208120601f850160051c810160208610156135705750805b601f850160051c820191505b81811015610c625782815560010161357c565b81516001600160401b038111156135a8576135a8612e53565b6135bc816135b6845461340e565b84613549565b602080601f8311600181146135f157600084156135d95750858301515b600019600386901b1c1916600185901b178555610c62565b600085815260208120601f198616915b8281101561362057888601518255948401946001909101908401613601565b508582101561363e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526026908201527f526f756e643a20526f756e6420656e64206973206265666f726520726f756e64604082015265081cdd185c9d60d21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561089957610899613694565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126136ea57600080fd5b8301803591506001600160401b0382111561370457600080fd5b60200191503681900382131561371957600080fd5b9250929050565b82848237600083820160008152835161373d818360208801612d76565b0195945050505050565b60006001820161375957613759613694565b5060010190565b60006108993683613005565b828152604060208201528135604082015260006020830135601e1984360301811261379657600080fd5b83016020810190356001600160401b038111156137b257600080fd5b8036038213156137c157600080fd5b60406060850152806080850152808260a0860137600060a0828601015260a0601f19601f830116850101925050509392505050565b60006080828403121561380857600080fd5b604051608081018181106001600160401b038211171561382a5761382a612e53565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006040828403121561386d57600080fd5b613875612e69565b905081356001600160401b038082111561388e57600080fd5b61389a85838601613005565b835260208401359150808211156138b057600080fd5b5061305e84828501613005565b600082601f8301126138ce57600080fd5b813560206138de612f8783612ec1565b82815260059290921b840181019181810190868411156138fd57600080fd5b8286015b8481101561392157803561391481612e0e565b8352918301918301613901565b509695505050505050565b60006040828403121561393e57600080fd5b613946612e69565b905081356001600160401b038082111561395f57600080fd5b61396b858386016138bd565b8352602084013591508082111561398157600080fd5b5061305e848285016138bd565b600080600080600080600080888a036101808112156139ac57600080fd5b60408112156139ba57600080fd5b506139c3612e69565b89356139ce81612e0e565b815260208a01356139de81612e0e565b602082015297506139f28a60408b016137f6565b965060c08901359550613a0760e08a016131ee565b9450613a166101008a01612ddf565b9350613a256101208a016131ee565b92506101408901356001600160401b0380821115613a4257600080fd5b613a4e8c838d0161385b565b93506101608b0135915080821115613a6557600080fd5b50613a728b828c0161392c565b9150509295985092959890939650565b600060208284031215613a9457600080fd5b815161107a81612e0e565b634e487b7160e01b600052601260045260246000fd5b600082613ac457613ac4613a9f565b500490565b600082613ad857613ad8613a9f565b500690565b808202811582820484141761089957610899613694565b600060208284031215613b0657600080fd5b815162ffffff8116811461107a57600080fd5b8082018082111561089957610899613694565b600060208284031215613b3e57600080fd5b5051919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613b7d816017850160208801612d76565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613bae816028840160208801612d76565b01602801949350505050565b60008251613bcc818460208701612d76565b9190910192915050565b600060208284031215613be857600080fd5b8151801515811461107a57600080fd5b600081613c0757613c07613694565b506000190190565b634e487b7160e01b600052603160045260246000fdfeec61da14b5abbac5c5fda6f1d57642a264ebd5d0674f35852829746dfb8174a5416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204522b245bff1f1d3dd65bcfed8c21aadc4d3320e4fd635c7cd41318d5f8d124864736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "applyToRound(bytes32,(uint256,string))": {
        "params": {
          "newApplicationMetaPtr": "appliction metaPtr",
          "projectID": "unique hash of the project"
        }
      },
      "getApplicationIndexesByProjectID(bytes32)": {
        "params": {
          "projectID": "unique hash of the project"
        },
        "returns": {
          "_0": "applicationIndexes indexes of the applications"
        }
      },
      "getApplicationStatus(uint256)": {
        "params": {
          "applicationIndex": "index of the application"
        },
        "returns": {
          "_0": "status status of the application"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(bytes,address)": {
        "details": "encodedParameters  - _initAddress Related contract / wallet addresses  - _initRoundTime Round timestamps  - _feePercentage Fee percentage  - _matchAmount Amount of tokens in the matching pool  - _token Address of the ERC20/native token for accepting matching pool contributions  - _initMetaPtr Round metaPtrs  - _initRoles Round roles",
        "params": {
          "encodedParameters": "Encoded parameters for program creation"
        }
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setApplicationStatuses((uint256,uint256)[])": {
        "params": {
          "statuses": "new statuses"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateApplicationMetaPtr((uint256,string))": {
        "params": {
          "newApplicationMetaPtr": "new applicationMetaPtr"
        }
      },
      "updateMatchAmount(uint256)": {
        "params": {
          "newAmount": "new Amount"
        }
      },
      "updateRoundFeeAddress(address)": {
        "params": {
          "newFeeAddress": "new fee address"
        }
      },
      "updateRoundFeePercentage(uint32)": {
        "params": {
          "newFeePercentage": "new fee percentage"
        }
      },
      "updateRoundMetaPtr((uint256,string))": {
        "params": {
          "newRoundMetaPtr": "new roundMetaPtr"
        }
      },
      "updateStartAndEndTimes(uint256,uint256,uint256,uint256)": {
        "details": "Only updates if new time is in the future and current set time is also in the future",
        "params": {
          "newApplicationsEndTime": "new applicationsEndTime",
          "newApplicationsStartTime": "new applicationsStartTime",
          "newRoundEndTime": "new roundEndTime",
          "newRoundStartTime": "new roundStartTime"
        }
      },
      "vote(bytes[])": {
        "params": {
          "encodedVotes": "encoded vote"
        }
      },
      "withdraw(address,address)": {
        "params": {
          "recipent": "recipient address",
          "tokenAddress": "token address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ApplicationMetaPtrUpdated((uint256,string),(uint256,string))": {
        "notice": "Emitted when the application form metaPtr is updated"
      },
      "ApplicationsEndTimeUpdated(uint256,uint256)": {
        "notice": "Emitted when application end time is updated"
      },
      "ApplicationsStartTimeUpdated(uint256,uint256)": {
        "notice": "Emitted when application start time is updated"
      },
      "MatchAmountUpdated(uint256)": {
        "notice": "Emitted when match amount is updated"
      },
      "NewProjectApplication(bytes32,uint256,(uint256,string))": {
        "notice": "Emitted when a project has applied to the round"
      },
      "PayFeeAndEscrowFundsToPayoutContract(uint256,uint256,uint256)": {
        "notice": "Emitted when protocol & round fees are paid"
      },
      "ProjectsMetaPtrUpdated((uint256,string),(uint256,string))": {
        "notice": "Emitted when projects metaPtr is updated"
      },
      "RoundEndTimeUpdated(uint256,uint256)": {
        "notice": "Emitted when a round end time is updated"
      },
      "RoundFeeAddressUpdated(address)": {
        "notice": "Emitted when a Round wallet address is updated"
      },
      "RoundFeePercentageUpdated(uint32)": {
        "notice": "Emitted when a Round fee percentage is updated"
      },
      "RoundMetaPtrUpdated((uint256,string),(uint256,string))": {
        "notice": "Emitted when the round metaPtr is updated"
      },
      "RoundStartTimeUpdated(uint256,uint256)": {
        "notice": "Emitted when a round start time is updated"
      }
    },
    "kind": "user",
    "methods": {
      "ROUND_OPERATOR_ROLE()": {
        "notice": "round operator role"
      },
      "alloSettings()": {
        "notice": "Allo Config Contract Address"
      },
      "applicationMetaPtr()": {
        "notice": "MetaPtr to the application form schema"
      },
      "applicationsEndTime()": {
        "notice": "Unix timestamp from when round stops accepting applications"
      },
      "applicationsStartTime()": {
        "notice": "Unix timestamp from when round can accept applications"
      },
      "applyToRound(bytes32,(uint256,string))": {
        "notice": "Submit a project application"
      },
      "getApplicationIndexesByProjectID(bytes32)": {
        "notice": "Get all applications of a projectID"
      },
      "getApplicationStatus(uint256)": {
        "notice": "Get application status"
      },
      "initialize(bytes,address)": {
        "notice": "Instantiates a new round"
      },
      "matchAmount()": {
        "notice": "Match Amount (excluding protocol fee & round fee)"
      },
      "payoutStrategy()": {
        "notice": "Payout Strategy Contract Address"
      },
      "payoutStrategyFactory()": {
        "notice": "Payout Strategy Factory Contract Address"
      },
      "roundEndTime()": {
        "notice": "Unix timestamp of the end of the round"
      },
      "roundFeeAddress()": {
        "notice": "Round fee address"
      },
      "roundFeePercentage()": {
        "notice": "Round fee percentage"
      },
      "roundMetaPtr()": {
        "notice": "MetaPtr to the round metadata"
      },
      "roundStartTime()": {
        "notice": "Unix timestamp of the start of the round"
      },
      "setApplicationStatuses((uint256,uint256)[])": {
        "notice": "Set application statuses"
      },
      "setReadyForPayout()": {
        "notice": "Pay Protocol & Round Fees and transfer funds to payout contract (only by ROUND_OPERATOR_ROLE)"
      },
      "token()": {
        "notice": "Token used to payout match amounts at the end of a round"
      },
      "updateStartAndEndTimes(uint256,uint256,uint256,uint256)": {
        "notice": "Update application, round start & end times (only by ROUND_OPERATOR_ROLE)"
      },
      "vote(bytes[])": {
        "notice": "Invoked by voter to cast votes"
      },
      "votingStrategy()": {
        "notice": "Voting Strategy Contract Address"
      },
      "votingStrategyFactory()": {
        "notice": "Voting Strategy Factory Contract Address"
      },
      "withdraw(address,address)": {
        "notice": "Withdraw funds from the contract (only by ROUND_OPERATOR_ROLE)"
      }
    },
    "notice": "Contract deployed per Round which would be managed by a group of ROUND_OPERATOR via the RoundFactory",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 800,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 803,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1917,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2297,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 174,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)169_storage)"
      },
      {
        "astId": 481,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 22,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)3607_storage)"
      },
      {
        "astId": 144,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2023,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10120,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "alloSettings",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(AlloSettings)11230"
      },
      {
        "astId": 10124,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "votingStrategyFactory",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IVotingStrategyFactory)11314"
      },
      {
        "astId": 10128,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "payoutStrategyFactory",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(IPayoutStrategyFactory)8353"
      },
      {
        "astId": 10131,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "votingStrategy",
        "offset": 0,
        "slot": "254",
        "type": "t_address"
      },
      {
        "astId": 10134,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "payoutStrategy",
        "offset": 0,
        "slot": "255",
        "type": "t_address_payable"
      },
      {
        "astId": 10137,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "applicationsStartTime",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 10140,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "applicationsEndTime",
        "offset": 0,
        "slot": "257",
        "type": "t_uint256"
      },
      {
        "astId": 10143,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "roundStartTime",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 10146,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "roundEndTime",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 10149,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "matchAmount",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 10152,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "token",
        "offset": 0,
        "slot": "261",
        "type": "t_address"
      },
      {
        "astId": 10155,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "roundFeePercentage",
        "offset": 20,
        "slot": "261",
        "type": "t_uint32"
      },
      {
        "astId": 10158,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "roundFeeAddress",
        "offset": 0,
        "slot": "262",
        "type": "t_address_payable"
      },
      {
        "astId": 10162,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "roundMetaPtr",
        "offset": 0,
        "slot": "263",
        "type": "t_struct(MetaPtr)11239_storage"
      },
      {
        "astId": 10166,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "applicationMetaPtr",
        "offset": 0,
        "slot": "265",
        "type": "t_struct(MetaPtr)11239_storage"
      },
      {
        "astId": 10206,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "nextApplicationIndex",
        "offset": 0,
        "slot": "267",
        "type": "t_uint256"
      },
      {
        "astId": 10210,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "applications",
        "offset": 0,
        "slot": "268",
        "type": "t_array(t_struct(Application)10204_storage)dyn_storage"
      },
      {
        "astId": 10215,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "applicationsIndexesByProjectID",
        "offset": 0,
        "slot": "269",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10219,
        "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
        "label": "applicationStatusesBitMap",
        "offset": 0,
        "slot": "270",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Application)10204_storage)dyn_storage": {
        "base": "t_struct(Application)10204_storage",
        "encoding": "dynamic_array",
        "label": "struct RoundImplementation.Application[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AlloSettings)11230": {
        "encoding": "inplace",
        "label": "contract AlloSettings",
        "numberOfBytes": "20"
      },
      "t_contract(IPayoutStrategyFactory)8353": {
        "encoding": "inplace",
        "label": "contract IPayoutStrategyFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IVotingStrategyFactory)11314": {
        "encoding": "inplace",
        "label": "contract IVotingStrategyFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3607_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3607_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)169_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)169_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3607_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 3606,
            "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3292_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Application)10204_storage": {
        "encoding": "inplace",
        "label": "struct RoundImplementation.Application",
        "members": [
          {
            "astId": 10198,
            "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
            "label": "projectID",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 10200,
            "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
            "label": "applicationIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10203,
            "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
            "label": "metaPtr",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(MetaPtr)11239_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(MetaPtr)11239_storage": {
        "encoding": "inplace",
        "label": "struct MetaPtr",
        "members": [
          {
            "astId": 11235,
            "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
            "label": "protocol",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11238,
            "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
            "label": "pointer",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)169_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 166,
            "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 168,
            "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3292_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 3287,
            "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3291,
            "contract": "contracts/round/RoundImplementation.sol:RoundImplementation",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}