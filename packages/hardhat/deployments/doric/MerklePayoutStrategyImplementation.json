{
  "address": "0x476C57C88799c0e8b475b38958AC0CD3e01EF344",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "BatchPayoutSuccessful",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "protocol",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "pointer",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct MetaPtr",
          "name": "distributionMetaPtr",
          "type": "tuple"
        }
      ],
      "name": "DistributionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "grantee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "projectId",
          "type": "bytes32"
        }
      ],
      "name": "FundsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ReadyForPayout",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ROUND_OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionMetaPtr",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocol",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "pointer",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "hasBeenDistributed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDistributionSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isReadyForPayout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "grantee",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "projectId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MerklePayoutStrategyImplementation.Distribution[]",
          "name": "_distributions",
          "type": "tuple[]"
        }
      ],
      "name": "payout",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setReadyForPayout",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encodedDistribution",
          "type": "bytes"
        }
      ],
      "name": "updateDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xce24805ed1dd3cf455fe9a118f6defbeb408e00a72aa52f84ed14555ece49840",
  "receipt": {
    "to": null,
    "from": "0x115147d2Bf58580709221C572463c47618c853ca",
    "contractAddress": "0x476C57C88799c0e8b475b38958AC0CD3e01EF344",
    "transactionIndex": 0,
    "gasUsed": "1556187",
    "logsBloom": "0x
    "blockHash": "0x6a50549ba5c54d90e133b0b3201e263a1894a79e94ef17b089135c654e8fe914",
    "transactionHash": "0xce24805ed1dd3cf455fe9a118f6defbeb408e00a72aa52f84ed14555ece49840",
    "logs": [],
    "blockNumber": 3948571,
    "cumulativeGasUsed": "1556187",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c921f1417ace463d64cfccd1853f0d26",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"BatchPayoutSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct MetaPtr\",\"name\":\"distributionMetaPtr\",\"type\":\"tuple\"}],\"name\":\"DistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ReadyForPayout\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUND_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionMetaPtr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocol\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pointer\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"hasBeenDistributed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDistributionSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyForPayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"grantee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"internalType\":\"struct MerklePayoutStrategyImplementation.Distribution[]\",\"name\":\"_distributions\",\"type\":\"tuple[]\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setReadyForPayout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedDistribution\",\"type\":\"bytes\"}],\"name\":\"updateDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"hasBeenDistributed(uint256)\":{\"params\":{\"_index\":\"index of the distribution\"}},\"payout((uint256,address,uint256,bytes32[],bytes32)[])\":{\"details\":\"can be invoked only by round operator\",\"params\":{\"_distributions\":\"encoded distribution\"}},\"updateDistribution(bytes)\":{\"params\":{\"encodedDistribution\":\"encoded distribution\"}},\"withdrawFunds(address)\":{\"params\":{\"withdrawAddress\":\"withdraw funds address\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BatchPayoutSuccessful(address)\":{\"notice\":\"Emitted when batch payout is successful\"},\"DistributionUpdated(bytes32,(uint256,string))\":{\"notice\":\"Emitted when the distribution is updated\"},\"FundsDistributed(uint256,address,address,bytes32)\":{\"notice\":\"Emitted when funds are distributed\"},\"FundsWithdrawn(address,uint256,address)\":{\"notice\":\"Emitted when funds are withdrawn from the payout contract\"},\"ReadyForPayout()\":{\"notice\":\"Emitted when contract is ready for payout\"}},\"kind\":\"user\",\"methods\":{\"ROUND_OPERATOR_ROLE()\":{\"notice\":\"round operator role\"},\"distributionMetaPtr()\":{\"notice\":\"MetaPtr containing the distribution\"},\"hasBeenDistributed(uint256)\":{\"notice\":\"Util function to check if distribution is done\"},\"init()\":{\"notice\":\"Invoked by RoundImplementation on creation to set the round for which the payout strategy is to be used\"},\"isDistributionSet()\":{\"notice\":\"function to check if distribution is set\"},\"merkleRoot()\":{\"notice\":\"merkle root generated from distribution\"},\"payout((uint256,address,uint256,bytes32[],bytes32)[])\":{\"notice\":\"function to distribute funds to recipient\"},\"roundAddress()\":{\"notice\":\"RoundImplementation address\"},\"setReadyForPayout()\":{\"notice\":\"Invoked by RoundImplementation to set isReadyForPayout\"},\"tokenAddress()\":{\"notice\":\"Token address\"},\"updateDistribution(bytes)\":{\"notice\":\"Invoked by round operator to update the merkle root and distribution MetaPtr\"},\"withdrawFunds(address)\":{\"notice\":\"Invoked by RoundImplementation to withdraw funds to withdrawAddress from the payout contract\"}},\"notice\":\"Merkle Payout Strategy contract which is deployed once per round and is used to upload the final match distribution.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol\":\"MerklePayoutStrategyImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7d24c901e098a04fa7f388c9ff1890bb522307272a2fee8030ee15a8d907096f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc8710577334e8d0799ae2b2a731b1924a7bddd64319da9787ddd2dc69bdd1ce5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.5) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"./ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\\n * selectors won't filter calls nested within a {multicall} operation.\\n *\\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\\n * {_msgSender} are not propagated to subcalls.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable, ContextUpgradeable {\\n    function __Multicall_init() internal onlyInitializing {\\n    }\\n\\n    function __Multicall_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        bytes memory context = msg.sender == _msgSender()\\n            ? new bytes(0)\\n            : msg.data[msg.data.length - _contextSuffixLength():];\\n\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = AddressUpgradeable.functionDelegateCall(address(this), bytes.concat(data[i], context));\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb1c0020052d12ce986fba21a25a75ef1aec0142007a23f345842c924ad9c71d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd90d7723512df65ae417adaf0801042940f0dabd60039ceeaffe34aa5b238da1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"contracts/payoutStrategy/IPayoutStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/MetaPtr.sol\\\";\\r\\nimport \\\"../round/RoundImplementation.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Defines the abstract contract for payout strategies\\r\\n * for a round. Any new payout strategy would be expected to\\r\\n * extend this abstract contract.\\r\\n *\\r\\n * Every PayoutStrategyImplementation contract would be unique to RoundImplementation\\r\\n * and would be deployed before creating a round.\\r\\n *\\r\\n * @dev\\r\\n *  - Deployed before creating a round\\r\\n *  - Funds are transferred to the payout contract from round only during payout\\r\\n */\\r\\nabstract contract IPayoutStrategy {\\r\\n\\r\\n  // --- Constants ---\\r\\n\\r\\n  /// @notice round operator role\\r\\n  bytes32 public constant ROUND_OPERATOR_ROLE = keccak256(\\\"ROUND_OPERATOR\\\");\\r\\n\\r\\n  // --- Data ---\\r\\n\\r\\n  /// @notice RoundImplementation address\\r\\n  address payable public roundAddress;\\r\\n\\r\\n  /// @notice Token address\\r\\n  address public tokenAddress;\\r\\n\\r\\n  // @notice\\r\\n  bool public isReadyForPayout;\\r\\n\\r\\n  // --- Event ---\\r\\n\\r\\n  /// @notice Emitted when contract is ready for payout\\r\\n  event ReadyForPayout();\\r\\n\\r\\n  // --- Modifier ---\\r\\n\\r\\n  /// @notice modifier to check if sender is round contract.\\r\\n  modifier isRoundContract() {\\r\\n    require(roundAddress != address(0), \\\"not linked to a round\\\");\\r\\n    require(msg.sender == roundAddress, \\\"not invoked by round\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @notice modifier to check if sender is round operator.\\r\\n  modifier isRoundOperator() {\\r\\n    require(\\r\\n      RoundImplementation(roundAddress).hasRole(ROUND_OPERATOR_ROLE, msg.sender),\\r\\n      \\\"not round operator\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @notice modifier to check if round has ended.\\r\\n  modifier roundHasEnded() {\\r\\n    uint roundEndTime = RoundImplementation(roundAddress).roundEndTime();\\r\\n    require(block.timestamp > roundEndTime, \\\"round has not ended\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // --- Core Methods ---\\r\\n\\r\\n  /**\\r\\n   * @notice Invoked by RoundImplementation on creation to\\r\\n   * set the round for which the payout strategy is to be used\\r\\n   */\\r\\n  function init() external virtual {\\r\\n    require(roundAddress == address(0x0), \\\"roundAddress already set\\\");\\r\\n    roundAddress = payable(msg.sender);\\r\\n\\r\\n    // set the token address\\r\\n    tokenAddress = RoundImplementation(roundAddress).token();\\r\\n\\r\\n    isReadyForPayout = false;\\r\\n  }\\r\\n\\r\\n  /// @notice Invoked by RoundImplementation to set isReadyForPayout\\r\\n  /// @dev Can only be called once and (by default) cannot be changed once called\\r\\n  function setReadyForPayout() virtual external payable isRoundContract roundHasEnded {\\r\\n    require(isReadyForPayout == false, \\\"isReadyForPayout already set\\\");\\r\\n\\r\\n    isReadyForPayout = true;\\r\\n    emit ReadyForPayout();\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x6e0070f188722cce37535ee50ba37d126066a57ecf1b287dfdb5d4095a7eba43\",\"license\":\"AGPL-3.0-only\"},\"contracts/payoutStrategy/IPayoutStrategyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IPayoutStrategyFactory {\\r\\n    function initialize() external;\\r\\n\\r\\n    function updatePayoutImplementation(\\r\\n        address payable newPayoutImplementation\\r\\n    ) external;\\r\\n\\r\\n    function create() external returns (address);\\r\\n}\",\"keccak256\":\"0x502843186fda00fb6855d6e2c3662de17113dd8fa08dd4a6cc818a889ad12f39\",\"license\":\"AGPL-3.0-only\"},\"contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"../../utils/MetaPtr.sol\\\";\\r\\nimport \\\"../IPayoutStrategy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Merkle Payout Strategy contract which is deployed once per round\\r\\n * and is used to upload the final match distribution.\\r\\n *\\r\\n */\\r\\ncontract MerklePayoutStrategyImplementation is IPayoutStrategy, Initializable {\\r\\n\\r\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n  string public constant VERSION = \\\"0.2.0\\\";\\r\\n\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  // --- Data ---\\r\\n\\r\\n  /// @notice merkle root generated from distribution\\r\\n  bytes32 public merkleRoot;\\r\\n\\r\\n  /// @notice packed array of booleans to keep track of claims\\r\\n  mapping(uint256 => uint256) private distributedBitMap;\\r\\n\\r\\n  /// MetaPtr containing the distribution\\r\\n  MetaPtr public distributionMetaPtr;\\r\\n\\r\\n  // --- Events ---\\r\\n\\r\\n  /// @notice Emitted when funds are withdrawn from the payout contract\\r\\n  event FundsWithdrawn(address indexed tokenAddress, uint256 amount, address withdrawAddress);\\r\\n\\r\\n  /// @notice Emitted when the distribution is updated\\r\\n  event DistributionUpdated(bytes32 merkleRoot, MetaPtr distributionMetaPtr);\\r\\n\\r\\n  /// @notice Emitted when funds are distributed\\r\\n  event FundsDistributed(\\r\\n    uint256 amount,\\r\\n    address grantee,\\r\\n    address indexed token,\\r\\n    bytes32 indexed projectId\\r\\n  );\\r\\n\\r\\n  /// @notice Emitted when batch payout is successful\\r\\n  event BatchPayoutSuccessful(address indexed sender);\\r\\n\\r\\n  // --- Types ---\\r\\n  struct Distribution {\\r\\n    uint256 index;\\r\\n    address grantee;\\r\\n    uint256 amount;\\r\\n    bytes32[] merkleProof;\\r\\n    bytes32 projectId;\\r\\n  }\\r\\n\\r\\n  // @NOTE: we need this because we're inheriting from Initializable.sol\\r\\n  function initialize() external initializer {\\r\\n    // empty initializer\\r\\n  }\\r\\n\\r\\n  // --- Core methods ---\\r\\n\\r\\n  /// @notice Invoked by round operator to update the merkle root and distribution MetaPtr\\r\\n  /// @param encodedDistribution encoded distribution\\r\\n  function updateDistribution(bytes calldata encodedDistribution) external roundHasEnded isRoundOperator {\\r\\n\\r\\n    require(isReadyForPayout == false, \\\"Payout: Already ready for payout\\\");\\r\\n\\r\\n    (bytes32 _merkleRoot, MetaPtr memory _distributionMetaPtr) = abi.decode(\\r\\n      encodedDistribution,\\r\\n      (bytes32, MetaPtr)\\r\\n    );\\r\\n\\r\\n    merkleRoot = _merkleRoot;\\r\\n    distributionMetaPtr = _distributionMetaPtr;\\r\\n\\r\\n    emit DistributionUpdated(merkleRoot, distributionMetaPtr);\\r\\n  }\\r\\n\\r\\n  /// @notice function to check if distribution is set\\r\\n  function isDistributionSet() public view returns (bool) {\\r\\n    return merkleRoot != \\\"\\\";\\r\\n  }\\r\\n\\r\\n  /// @notice Invoked by RoundImplementation to set isReadyForPayout\\r\\n  function setReadyForPayout() override external payable isRoundContract roundHasEnded {\\r\\n    require(isReadyForPayout == false, \\\"isReadyForPayout already set\\\");\\r\\n    require(isDistributionSet(), \\\"distribution not set\\\");\\r\\n\\r\\n    isReadyForPayout = true;\\r\\n    emit ReadyForPayout();\\r\\n  }\\r\\n\\r\\n  /// @notice Util function to check if distribution is done\\r\\n  /// @param _index index of the distribution\\r\\n  function hasBeenDistributed(uint256 _index) public view returns (bool) {\\r\\n\\r\\n    uint256 distributedWordIndex = _index / 256;\\r\\n    uint256 distributedBitIndex = _index % 256;\\r\\n    uint256 distributedWord = distributedBitMap[distributedWordIndex];\\r\\n    uint256 mask = (1 << distributedBitIndex);\\r\\n\\r\\n    return distributedWord & mask == mask;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Invoked by RoundImplementation to withdraw funds to\\r\\n   * withdrawAddress from the payout contract\\r\\n   *\\r\\n   * @param withdrawAddress withdraw funds address\\r\\n   */\\r\\n  function withdrawFunds(address payable withdrawAddress) external payable isRoundOperator roundHasEnded {\\r\\n\\r\\n    uint balance = _getTokenBalance();\\r\\n\\r\\n    if (tokenAddress == address(0)) {\\r\\n      /// @dev native token\\r\\n      AddressUpgradeable.sendValue(\\r\\n        withdrawAddress,\\r\\n        balance\\r\\n      );\\r\\n    } else {\\r\\n      /// @dev ERC20 token\\r\\n      IERC20Upgradeable(tokenAddress).safeTransfer(\\r\\n        withdrawAddress,\\r\\n        balance\\r\\n      );\\r\\n    }\\r\\n\\r\\n    emit FundsWithdrawn(tokenAddress, balance, withdrawAddress);\\r\\n  }\\r\\n\\r\\n  /// @notice function to distribute funds to recipient\\r\\n  /// @dev can be invoked only by round operator\\r\\n  /// @param _distributions encoded distribution\\r\\n  function payout(Distribution[] calldata _distributions) external payable isRoundOperator {\\r\\n    require(isReadyForPayout == true, \\\"Payout: Not ready for payout\\\");\\r\\n\\r\\n    for (uint256 i = 0; i < _distributions.length; ++i) {\\r\\n      _distribute(_distributions[i]);\\r\\n    }\\r\\n\\r\\n    emit BatchPayoutSuccessful(msg.sender);\\r\\n  }\\r\\n\\r\\n  /// @notice Util function to distribute funds to recipient\\r\\n  /// @param _distribution encoded distribution\\r\\n  function _distribute(Distribution calldata _distribution) private {\\r\\n    uint256 _index = _distribution.index;\\r\\n    address _grantee = _distribution.grantee;\\r\\n    uint256 _amount = _distribution.amount;\\r\\n    bytes32 _projectId = _distribution.projectId;\\r\\n    bytes32[] memory _merkleProof = _distribution.merkleProof;\\r\\n\\r\\n    require(!hasBeenDistributed(_index), \\\"Payout: Already distributed\\\");\\r\\n\\r\\n    /* We need double hashing to prevent second preimage attacks */\\r\\n    bytes32 node = keccak256(bytes.concat(keccak256(abi.encode(_index, _grantee, _amount, _projectId))));\\r\\n\\r\\n    require(MerkleProof.verify(_merkleProof, merkleRoot, node), \\\"Payout: Invalid proof\\\");\\r\\n\\r\\n    _setDistributed(_index);\\r\\n\\r\\n    _transferAmount(payable(_grantee), _amount);\\r\\n\\r\\n    emit FundsDistributed(\\r\\n      _amount,\\r\\n      _grantee,\\r\\n      tokenAddress,\\r\\n      _projectId\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /// @notice Util function to mark distribution as done\\r\\n  /// @param _index index of the distribution\\r\\n  function _setDistributed(uint256 _index) private {\\r\\n    uint256 distributedWordIndex = _index / 256;\\r\\n    uint256 distributedBitIndex = _index % 256;\\r\\n    distributedBitMap[distributedWordIndex] |= (1 << distributedBitIndex);\\r\\n  }\\r\\n\\r\\n  /// @notice Util function to transfer amount to recipient\\r\\n  /// @param _recipient recipient address\\r\\n  /// @param _amount amount to transfer\\r\\n  function _transferAmount(address payable _recipient, uint256 _amount) private {\\r\\n    if (tokenAddress == address(0)) {\\r\\n      Address.sendValue(_recipient, _amount);\\r\\n    } else {\\r\\n      IERC20(tokenAddress).safeTransfer(_recipient, _amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Util function to get token balance in the contract\\r\\n   */\\r\\n  function _getTokenBalance() internal view returns (uint) {\\r\\n    if (tokenAddress == address(0)) {\\r\\n      return address(this).balance;\\r\\n    } else {\\r\\n      return IERC20Upgradeable(tokenAddress).balanceOf(address(this));\\r\\n    }\\r\\n  }\\r\\n}\",\"keccak256\":\"0x4cefbb5c989ce20339eb6ef074cba3fd0e3652bbd3762152167827387063a0e6\",\"license\":\"AGPL-3.0-only\"},\"contracts/round/IRoundImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../utils/MetaPtr.sol\\\";\\r\\n\\r\\ninterface IRoundImplementation {\\r\\n    struct ApplicationStatus {\\r\\n        uint256 index;\\r\\n        uint256 statusRow;\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        bytes calldata encodedParameters,\\r\\n        address _alloSettings\\r\\n    ) external;\\r\\n\\r\\n    function updateMatchAmount(uint256 newAmount) external;\\r\\n\\r\\n    function updateRoundFeePercentage(uint32 newFeePercentage) external;\\r\\n\\r\\n    function updateRoundFeeAddress(address payable newFeeAddress) external;\\r\\n\\r\\n    function updateRoundMetaPtr(MetaPtr memory newRoundMetaPtr) external;\\r\\n\\r\\n    function updateApplicationMetaPtr(\\r\\n        MetaPtr memory newApplicationMetaPtr\\r\\n    ) external;\\r\\n\\r\\n    function updateStartAndEndTimes(\\r\\n        uint256 newApplicationsStartTime,\\r\\n        uint256 newApplicationsEndTime,\\r\\n        uint256 newRoundStartTime,\\r\\n        uint256 newRoundEndTime\\r\\n    ) external;\\r\\n\\r\\n    function applyToRound(\\r\\n        bytes32 projectID,\\r\\n        MetaPtr calldata newApplicationMetaPtr\\r\\n    ) external;\\r\\n\\r\\n    function getApplicationIndexesByProjectID(\\r\\n        bytes32 projectID\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    function setApplicationStatuses(\\r\\n        ApplicationStatus[] memory statuses\\r\\n    ) external;\\r\\n\\r\\n    function getApplicationStatus(\\r\\n        uint256 applicationIndex\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function vote(bytes[] memory encodedVotes) external payable;\\r\\n\\r\\n    function setReadyForPayout() external payable;\\r\\n\\r\\n    function withdraw(address tokenAddress, address payable recipent) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x424fa4d73314d5ed1ce110274796ba085b25d742a7f68ad72a2b77dd999c5044\",\"license\":\"AGPL-3.0-only\"},\"contracts/round/RoundImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IRoundImplementation.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../settings/AlloSettings.sol\\\";\\r\\nimport \\\"../votingStrategy/IVotingStrategyFactory.sol\\\";\\r\\nimport \\\"../payoutStrategy/IPayoutStrategyFactory.sol\\\";\\r\\nimport \\\"../votingStrategy/IVotingStrategy.sol\\\";\\r\\nimport \\\"../payoutStrategy/IPayoutStrategy.sol\\\";\\r\\n\\r\\nimport \\\"../utils/MetaPtr.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Contract deployed per Round which would be managed by\\r\\n * a group of ROUND_OPERATOR via the RoundFactory\\r\\n *\\r\\n */\\r\\ncontract RoundImplementation is IRoundImplementation, Initializable, AccessControlEnumerableUpgradeable, MulticallUpgradeable {\\r\\n\\r\\n  string public constant VERSION = \\\"1.0.0\\\";\\r\\n\\r\\n  // --- Libraries ---\\r\\n  using Address for address;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  // --- Roles ---\\r\\n\\r\\n  /// @notice round operator role\\r\\n  bytes32 public constant ROUND_OPERATOR_ROLE = keccak256(\\\"ROUND_OPERATOR\\\");\\r\\n\\r\\n  // --- Events ---\\r\\n\\r\\n  /// @notice Emitted when match amount is updated\\r\\n  event MatchAmountUpdated(uint256 newAmount);\\r\\n\\r\\n  /// @notice Emitted when a Round fee percentage is updated\\r\\n  event RoundFeePercentageUpdated(uint32 roundFeePercentage);\\r\\n\\r\\n  /// @notice Emitted when a Round wallet address is updated\\r\\n  event RoundFeeAddressUpdated(address roundFeeAddress);\\r\\n\\r\\n  /// @notice Emitted when the round metaPtr is updated\\r\\n  event RoundMetaPtrUpdated(MetaPtr oldMetaPtr, MetaPtr newMetaPtr);\\r\\n\\r\\n  /// @notice Emitted when the application form metaPtr is updated\\r\\n  event ApplicationMetaPtrUpdated(MetaPtr oldMetaPtr, MetaPtr newMetaPtr);\\r\\n\\r\\n  /// @notice Emitted when application start time is updated\\r\\n  event ApplicationsStartTimeUpdated(uint256 oldTime, uint256 newTime);\\r\\n\\r\\n  /// @notice Emitted when application end time is updated\\r\\n  event ApplicationsEndTimeUpdated(uint256 oldTime, uint256 newTime);\\r\\n\\r\\n  /// @notice Emitted when a round start time is updated\\r\\n  event RoundStartTimeUpdated(uint256 oldTime, uint256 newTime);\\r\\n\\r\\n  /// @notice Emitted when a round end time is updated\\r\\n  event RoundEndTimeUpdated(uint256 oldTime, uint256 newTime);\\r\\n\\r\\n  /// @notice Emitted when projects metaPtr is updated\\r\\n  event ProjectsMetaPtrUpdated(MetaPtr oldMetaPtr, MetaPtr newMetaPtr);\\r\\n\\r\\n  /// @notice Emitted when a project has applied to the round\\r\\n  event NewProjectApplication(bytes32 indexed projectID, uint256 applicationIndex, MetaPtr applicationMetaPtr);\\r\\n\\r\\n  /// @notice Emitted when protocol & round fees are paid\\r\\n  event PayFeeAndEscrowFundsToPayoutContract(uint256 matchAmountAfterFees, uint protocolFeeAmount, uint roundFeeAmount);\\r\\n\\r\\n  event ApplicationStatusesUpdated(uint256 indexed index, uint256 indexed status);\\r\\n\\r\\n  // --- Modifier ---\\r\\n\\r\\n  /// @notice modifier to check if round has not ended.\\r\\n  modifier roundHasNotEnded() {\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(block.timestamp <= roundEndTime, \\\"Round: Round has ended\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @notice modifier to check if round has ended.\\r\\n  modifier roundHasEnded() {\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(block.timestamp > roundEndTime, \\\"Round: Round has not ended\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // --- Data ---\\r\\n\\r\\n  /// @notice Allo Config Contract Address\\r\\n  AlloSettings public alloSettings;\\r\\n\\r\\n  /// @notice Voting Strategy Factory Contract Address\\r\\n  IVotingStrategyFactory public votingStrategyFactory;\\r\\n\\r\\n  /// @notice Payout Strategy Factory Contract Address\\r\\n  IPayoutStrategyFactory public payoutStrategyFactory;\\r\\n\\r\\n  /// @notice Voting Strategy Contract Address\\r\\n  address public votingStrategy;\\r\\n\\r\\n  /// @notice Payout Strategy Contract Address\\r\\n  address payable public payoutStrategy;\\r\\n\\r\\n  /// @notice Unix timestamp from when round can accept applications\\r\\n  uint256 public applicationsStartTime;\\r\\n\\r\\n  /// @notice Unix timestamp from when round stops accepting applications\\r\\n  uint256 public applicationsEndTime;\\r\\n\\r\\n  /// @notice Unix timestamp of the start of the round\\r\\n  uint256 public roundStartTime;\\r\\n\\r\\n  /// @notice Unix timestamp of the end of the round\\r\\n  uint256 public roundEndTime;\\r\\n\\r\\n  /// @notice Match Amount (excluding protocol fee & round fee)\\r\\n  uint256 public matchAmount;\\r\\n\\r\\n  /// @notice Token used to payout match amounts at the end of a round\\r\\n  address public token;\\r\\n\\r\\n  /// @notice Round fee percentage\\r\\n  uint32 public roundFeePercentage;\\r\\n\\r\\n  /// @notice Round fee address\\r\\n  address payable public roundFeeAddress;\\r\\n\\r\\n  /// @notice MetaPtr to the round metadata\\r\\n  MetaPtr public roundMetaPtr;\\r\\n\\r\\n  /// @notice MetaPtr to the application form schema\\r\\n  MetaPtr public applicationMetaPtr;\\r\\n\\r\\n  // --- Struct ---\\r\\n\\r\\n  struct InitAddress {\\r\\n    IVotingStrategyFactory votingStrategyFactory; // Deployed voting strategy factory contract\\r\\n    IPayoutStrategyFactory payoutStrategyFactory; // Deployed payout strategy factory contract\\r\\n  }\\r\\n\\r\\n  struct InitRoundTime {\\r\\n    uint256 applicationsStartTime; // Unix timestamp from when round can accept applications\\r\\n    uint256 applicationsEndTime; // Unix timestamp from when round stops accepting applications\\r\\n    uint256 roundStartTime; // Unix timestamp of the start of the round\\r\\n    uint256 roundEndTime; // Unix timestamp of the end of the round\\r\\n  }\\r\\n\\r\\n  struct InitMetaPtr {\\r\\n    MetaPtr roundMetaPtr; // MetaPtr to the round metadata\\r\\n    MetaPtr applicationMetaPtr; // MetaPtr to the application form schema\\r\\n  }\\r\\n\\r\\n  struct InitRoles {\\r\\n    address[] adminRoles; // Addresses to be granted DEFAULT_ADMIN_ROLE\\r\\n    address[] roundOperators; // Addresses to be granted ROUND_OPERATOR_ROLE\\r\\n  }\\r\\n\\r\\n  struct Application {\\r\\n    bytes32 projectID;\\r\\n    uint256 applicationIndex;\\r\\n    MetaPtr metaPtr;\\r\\n  }\\r\\n\\r\\n  uint256 public nextApplicationIndex;\\r\\n\\r\\n  // An array of applications, each new application is appended to the array\\r\\n  Application[] public applications;\\r\\n  mapping(bytes32 => uint256[]) public applicationsIndexesByProjectID;\\r\\n\\r\\n  // This is a packed array of booleans.\\r\\n  // statuses[0] is the first row of the bitmap and allows to store 256 bits to describe\\r\\n  // the status of 256 projects.\\r\\n  // statuses[1] is the second row, and so on.\\r\\n  // Instead of using 1 bit for each application status, we use 2 bits to allow 4 statuses:\\r\\n  // 0: pending\\r\\n  // 1: approved\\r\\n  // 2: rejected\\r\\n  // 3: canceled\\r\\n  // Since it's a mapping, the storage is pre-allocated with zero values,\\r\\n  // so if we check the status of an existing application, the value is by default 0 (pending).\\r\\n  // If we want to check the status of an application, we take its index from the `applications` array\\r\\n  // and convert it to the 2-bits position in the bitmap.\\r\\n  mapping(uint256 => uint256) public applicationStatusesBitMap;\\r\\n\\r\\n  // --- Core methods ---\\r\\n\\r\\n  /**\\r\\n   * @notice Instantiates a new round\\r\\n   * @param encodedParameters Encoded parameters for program creation\\r\\n   * @dev encodedParameters\\r\\n   *  - _initAddress Related contract / wallet addresses\\r\\n   *  - _initRoundTime Round timestamps\\r\\n   *  - _feePercentage Fee percentage\\r\\n   *  - _matchAmount Amount of tokens in the matching pool\\r\\n   *  - _token Address of the ERC20/native token for accepting matching pool contributions\\r\\n   *  - _initMetaPtr Round metaPtrs\\r\\n   *  - _initRoles Round roles\\r\\n   */\\r\\n  function initialize(\\r\\n    bytes calldata encodedParameters,\\r\\n    address _alloSettings\\r\\n  ) external initializer {\\r\\n    // Decode _encodedParameters\\r\\n    (\\r\\n      InitAddress memory _initAddress,\\r\\n      InitRoundTime memory _initRoundTime,\\r\\n      uint256 _matchAmount,\\r\\n      address _token,\\r\\n      uint32 _roundFeePercentage,\\r\\n      address payable _roundFeeAddress,\\r\\n      InitMetaPtr memory _initMetaPtr,\\r\\n      InitRoles memory _initRoles\\r\\n    ) = abi.decode(\\r\\n      encodedParameters, (\\r\\n      (InitAddress),\\r\\n      (InitRoundTime),\\r\\n      uint256,\\r\\n      address,\\r\\n      uint32,\\r\\n      address,\\r\\n      (InitMetaPtr),\\r\\n      (InitRoles)\\r\\n    ));\\r\\n\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(\\r\\n      _initRoundTime.applicationsStartTime >= block.timestamp,\\r\\n      \\\"Round: Time has already passed\\\"\\r\\n    );\\r\\n    require(\\r\\n      _initRoundTime.applicationsEndTime > _initRoundTime.applicationsStartTime,\\r\\n      \\\"Round: App end is before app start\\\"\\r\\n    );\\r\\n    require(\\r\\n      _initRoundTime.roundEndTime >= _initRoundTime.applicationsEndTime,\\r\\n      \\\"Round: Round end is before app end\\\"\\r\\n    );\\r\\n    require(\\r\\n      _initRoundTime.roundEndTime > _initRoundTime.roundStartTime,\\r\\n      \\\"Round: Round end is before round start\\\"\\r\\n    );\\r\\n    require(\\r\\n      _initRoundTime.roundStartTime >= _initRoundTime.applicationsStartTime,\\r\\n      \\\"Round: Round start is before app start\\\"\\r\\n    );\\r\\n\\r\\n    alloSettings = AlloSettings(_alloSettings);\\r\\n\\r\\n    votingStrategyFactory = _initAddress.votingStrategyFactory;\\r\\n    payoutStrategyFactory = _initAddress.payoutStrategyFactory;\\r\\n    applicationsStartTime = _initRoundTime.applicationsStartTime;\\r\\n    applicationsEndTime = _initRoundTime.applicationsEndTime;\\r\\n    roundStartTime = _initRoundTime.roundStartTime;\\r\\n    roundEndTime = _initRoundTime.roundEndTime;\\r\\n    token = _token;\\r\\n\\r\\n    // deploy voting contract\\r\\n    votingStrategy = votingStrategyFactory.create();\\r\\n\\r\\n    // Invoke init on voting contract\\r\\n    IVotingStrategy(votingStrategy).init();\\r\\n\\r\\n    // deploy payout contract\\r\\n    payoutStrategy = payable(payoutStrategyFactory.create());\\r\\n\\r\\n    // Invoke init on payout contract\\r\\n    IPayoutStrategy(payoutStrategy).init();\\r\\n\\r\\n    matchAmount = _matchAmount;\\r\\n    roundFeePercentage = _roundFeePercentage;\\r\\n    roundFeeAddress = _roundFeeAddress;\\r\\n    roundMetaPtr = _initMetaPtr.roundMetaPtr;\\r\\n    applicationMetaPtr = _initMetaPtr.applicationMetaPtr;\\r\\n\\r\\n    // Assigning default admin role\\r\\n    for (uint256 i = 0; i < _initRoles.adminRoles.length; ++i) {\\r\\n      _grantRole(DEFAULT_ADMIN_ROLE, _initRoles.adminRoles[i]);\\r\\n    }\\r\\n\\r\\n    // Assigning round operators\\r\\n    for (uint256 i = 0; i < _initRoles.roundOperators.length; ++i) {\\r\\n      _grantRole(ROUND_OPERATOR_ROLE, _initRoles.roundOperators[i]);\\r\\n    }\\r\\n\\r\\n    __Multicall_init();\\r\\n  }\\r\\n\\r\\n  // @notice Update match amount (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param newAmount new Amount\\r\\n  function updateMatchAmount(uint256 newAmount) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    require(newAmount > matchAmount, \\\"Round: Lesser than current match amount\\\");\\r\\n\\r\\n    matchAmount = newAmount;\\r\\n\\r\\n    emit MatchAmountUpdated(newAmount);\\r\\n  }\\r\\n\\r\\n  // @notice Update round fee percentage (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param newFeePercentage new fee percentage\\r\\n  function updateRoundFeePercentage(uint32 newFeePercentage) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    roundFeePercentage = newFeePercentage;\\r\\n    emit RoundFeePercentageUpdated(roundFeePercentage);\\r\\n  }\\r\\n\\r\\n  // @notice Update round fee address (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param newFeeAddress new fee address\\r\\n  function updateRoundFeeAddress(address payable newFeeAddress) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    roundFeeAddress = newFeeAddress;\\r\\n    emit RoundFeeAddressUpdated(newFeeAddress);\\r\\n  }\\r\\n\\r\\n  // @notice Update roundMetaPtr (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param newRoundMetaPtr new roundMetaPtr\\r\\n  function updateRoundMetaPtr(MetaPtr memory newRoundMetaPtr) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    emit RoundMetaPtrUpdated(roundMetaPtr, newRoundMetaPtr);\\r\\n    roundMetaPtr = newRoundMetaPtr;\\r\\n  }\\r\\n\\r\\n  // @notice Update applicationMetaPtr (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param newApplicationMetaPtr new applicationMetaPtr\\r\\n  function updateApplicationMetaPtr(MetaPtr memory newApplicationMetaPtr) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    emit ApplicationMetaPtrUpdated(applicationMetaPtr, newApplicationMetaPtr);\\r\\n    applicationMetaPtr = newApplicationMetaPtr;\\r\\n  }\\r\\n\\r\\n  /// @notice Update application, round start & end times (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @dev Only updates if new time is in the future and current set time is also in the future\\r\\n  /// @param newApplicationsStartTime new applicationsStartTime\\r\\n  /// @param newApplicationsEndTime new applicationsEndTime\\r\\n  /// @param newRoundStartTime new roundStartTime\\r\\n  /// @param newRoundEndTime new roundEndTime\\r\\n  function updateStartAndEndTimes(\\r\\n    uint256 newApplicationsStartTime,\\r\\n    uint256 newApplicationsEndTime,\\r\\n    uint256 newRoundStartTime,\\r\\n    uint256 newRoundEndTime\\r\\n  ) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(newApplicationsStartTime < newApplicationsEndTime, \\\"Round: Application end is before application start\\\");\\r\\n    require(newRoundStartTime < newRoundEndTime, \\\"Round: Round end is before round start\\\");\\r\\n    require(newApplicationsStartTime <= newRoundStartTime, \\\"Round: Round start is before application start\\\");\\r\\n    require(newApplicationsEndTime <= newRoundEndTime, \\\"Round: Round end is before application end\\\");\\r\\n    require(block.timestamp <= newApplicationsStartTime, \\\"Round: Time has already passed\\\");\\r\\n\\r\\n    if (\\r\\n      applicationsStartTime >= block.timestamp &&\\r\\n      newApplicationsStartTime != applicationsStartTime\\r\\n    ) {\\r\\n      emit ApplicationsStartTimeUpdated(applicationsStartTime, newApplicationsStartTime);\\r\\n      applicationsStartTime = newApplicationsStartTime;\\r\\n    }\\r\\n\\r\\n    if (\\r\\n      applicationsEndTime >= block.timestamp &&\\r\\n      newApplicationsEndTime != applicationsEndTime\\r\\n    ) {\\r\\n      emit ApplicationsEndTimeUpdated(applicationsEndTime, newApplicationsEndTime);\\r\\n      applicationsEndTime = newApplicationsEndTime;\\r\\n    }\\r\\n\\r\\n    if (\\r\\n      roundStartTime >= block.timestamp &&\\r\\n      newRoundStartTime != roundStartTime\\r\\n    ) {\\r\\n      emit RoundStartTimeUpdated(roundStartTime, newRoundStartTime);\\r\\n      roundStartTime = newRoundStartTime;\\r\\n    }\\r\\n\\r\\n    if (\\r\\n      roundEndTime >= block.timestamp &&\\r\\n      newRoundEndTime != roundEndTime\\r\\n    ) {\\r\\n      emit RoundEndTimeUpdated(roundEndTime, newRoundEndTime);\\r\\n      roundEndTime = newRoundEndTime;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Submit a project application\\r\\n  /// @param projectID unique hash of the project\\r\\n  /// @param newApplicationMetaPtr appliction metaPtr\\r\\n  function applyToRound(bytes32 projectID, MetaPtr calldata newApplicationMetaPtr) external {\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(\\r\\n      applicationsStartTime <= block.timestamp  &&\\r\\n      block.timestamp <= applicationsEndTime,\\r\\n      \\\"Round: Applications period not started or over\\\"\\r\\n    );\\r\\n    applications.push(Application(projectID, nextApplicationIndex, newApplicationMetaPtr));\\r\\n    applicationsIndexesByProjectID[projectID].push(nextApplicationIndex);\\r\\n    emit NewProjectApplication(projectID, nextApplicationIndex, newApplicationMetaPtr);\\r\\n    nextApplicationIndex++;\\r\\n  }\\r\\n\\r\\n  /// @notice Get all applications of a projectID\\r\\n  /// @param projectID unique hash of the project\\r\\n  /// @return applicationIndexes indexes of the applications\\r\\n  function getApplicationIndexesByProjectID(bytes32 projectID) external view returns(uint256[] memory) {\\r\\n    return applicationsIndexesByProjectID[projectID];\\r\\n  }\\r\\n\\r\\n  // Statuses:\\r\\n  // * 0 - pending\\r\\n  // * 1 - approved\\r\\n  // * 2 - rejected\\r\\n  // * 3 - canceled\\r\\n  /// Set application statuses\\r\\n  /// @param statuses new statuses\\r\\n  function setApplicationStatuses(ApplicationStatus[] memory statuses) external roundHasNotEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    for (uint256 i = 0; i < statuses.length;) {\\r\\n      uint256 rowIndex = statuses[i].index;\\r\\n      uint256 fullRow = statuses[i].statusRow;\\r\\n\\r\\n      applicationStatusesBitMap[rowIndex] = fullRow;\\r\\n\\r\\n      emit ApplicationStatusesUpdated(rowIndex, fullRow);\\r\\n\\r\\n      unchecked {\\r\\n        i++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Get application status\\r\\n  /// @param applicationIndex index of the application\\r\\n  /// @return status status of the application\\r\\n  function getApplicationStatus(uint256 applicationIndex) external view returns(uint256) {\\r\\n    require(applicationIndex < applications.length, \\\"Round: Application does not exist\\\");\\r\\n\\r\\n    uint256 rowIndex = applicationIndex / 128;\\r\\n    uint256 colIndex = (applicationIndex % 128) * 2;\\r\\n\\r\\n    uint256 currentRow = applicationStatusesBitMap[rowIndex];\\r\\n    uint256 status = (currentRow >> colIndex) & 3;\\r\\n\\r\\n    return status;\\r\\n  }\\r\\n\\r\\n  /// @notice Invoked by voter to cast votes\\r\\n  /// @param encodedVotes encoded vote\\r\\n  function vote(bytes[] memory encodedVotes) external payable {\\r\\n    // slither-disable-next-line timestamp\\r\\n    require(\\r\\n      roundStartTime <= block.timestamp &&\\r\\n      block.timestamp <= roundEndTime,\\r\\n      \\\"Round: Round is not active\\\"\\r\\n    );\\r\\n\\r\\n    IVotingStrategy(votingStrategy).vote{value: msg.value}(encodedVotes, msg.sender);\\r\\n  }\\r\\n\\r\\n  /// @notice Pay Protocol & Round Fees and transfer funds to payout contract (only by ROUND_OPERATOR_ROLE)\\r\\n  function setReadyForPayout() external payable roundHasEnded onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    uint256 fundsInContract = _getTokenBalance(token);\\r\\n    uint32 denominator = alloSettings.DENOMINATOR();\\r\\n\\r\\n    uint256 protocolFeeAmount = (matchAmount * alloSettings.protocolFeePercentage()) / denominator;\\r\\n    uint256 roundFeeAmount = (matchAmount * roundFeePercentage) / denominator;\\r\\n\\r\\n    // total funds needed for payout\\r\\n    uint256 neededFunds = matchAmount + protocolFeeAmount + roundFeeAmount;\\r\\n\\r\\n    require(fundsInContract >= neededFunds, \\\"Round: Not enough funds in contract\\\");\\r\\n\\r\\n    // deduct protocol fee\\r\\n    if (protocolFeeAmount > 0) {\\r\\n      address payable protocolTreasury = alloSettings.protocolTreasury();\\r\\n      _transferAmount(protocolTreasury, protocolFeeAmount, token);\\r\\n    }\\r\\n\\r\\n    // deduct round fee\\r\\n    if (roundFeeAmount > 0) {\\r\\n      _transferAmount(roundFeeAddress, roundFeeAmount, token);\\r\\n    }\\r\\n\\r\\n    // update funds in contract after fee deduction\\r\\n    fundsInContract = _getTokenBalance(token);\\r\\n\\r\\n    // transfer funds to payout contract\\r\\n    if (token == address(0)) {\\r\\n      IPayoutStrategy(payoutStrategy).setReadyForPayout{value: fundsInContract}();\\r\\n    } else {\\r\\n      IERC20(token).safeTransfer(address(payoutStrategy), fundsInContract);\\r\\n      IPayoutStrategy(payoutStrategy).setReadyForPayout();\\r\\n    }\\r\\n\\r\\n    emit PayFeeAndEscrowFundsToPayoutContract(fundsInContract, protocolFeeAmount, roundFeeAmount);\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraw funds from the contract (only by ROUND_OPERATOR_ROLE)\\r\\n  /// @param tokenAddress token address\\r\\n  /// @param recipent recipient address\\r\\n  function withdraw(address tokenAddress, address payable recipent) external onlyRole(ROUND_OPERATOR_ROLE) {\\r\\n    require(tokenAddress != token, \\\"Round: Cannot withdraw round token\\\");\\r\\n    _transferAmount(recipent, _getTokenBalance(tokenAddress), tokenAddress);\\r\\n  }\\r\\n\\r\\n  /// @notice Util function to get token balance in the contract\\r\\n  /// @param tokenAddress token address\\r\\n  function _getTokenBalance(address tokenAddress) private view returns (uint256) {\\r\\n    if (tokenAddress == address(0)) {\\r\\n      return address(this).balance;\\r\\n    } else {\\r\\n      return IERC20(tokenAddress).balanceOf(address(this));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Util function to transfer amount to recipient\\r\\n  /// @param _recipient recipient address\\r\\n  /// @param _amount amount to transfer\\r\\n  /// @param _tokenAddress token address\\r\\n  function _transferAmount(address payable _recipient, uint256 _amount, address _tokenAddress) private {\\r\\n    if (_tokenAddress == address(0)) {\\r\\n      Address.sendValue(_recipient, _amount);\\r\\n    } else {\\r\\n      IERC20(_tokenAddress).safeTransfer(_recipient, _amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // Override functions to resolve conflicts\\r\\n  function _msgSender() internal view override(ContextUpgradeable) returns (address) {\\r\\n      return ContextUpgradeable._msgSender();\\r\\n  }\\r\\n  \\r\\n  function _msgData() internal view override(ContextUpgradeable) returns (bytes calldata) {\\r\\n      return ContextUpgradeable._msgData();\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x299bd44ca4e90258d5e913b0d11a53d1ddbe90a02ea71d6d70fc44bc92fff214\",\"license\":\"AGPL-3.0-only\"},\"contracts/settings/AlloSettings.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract AlloSettings is OwnableUpgradeable {\\r\\n\\r\\n  string public constant VERSION = \\\"1.0.0\\\";\\r\\n\\r\\n  // 1000 * 100\\r\\n  uint24 public constant DENOMINATOR = 100000;\\r\\n\\r\\n  // --- Data ---\\r\\n\\r\\n  /// @notice Address of the protocol treasury\\r\\n  address payable public protocolTreasury;\\r\\n\\r\\n  /// @notice Protocol fee percentage\\r\\n  /// 100% = 100_000 | 10% = 10_000 | 1% = 1_000 | 0.1% = 100 | 0.01% = 10\\r\\n  uint24 public protocolFeePercentage;\\r\\n\\r\\n  // --- Event ---\\r\\n\\r\\n  /// @notice Emitted when protocol fee percentage is updated\\r\\n  event ProtocolFeePercentageUpdated(uint24 protocolFeePercentage);\\r\\n\\r\\n  /// @notice Emitted when a protocol wallet address is updated\\r\\n  event ProtocolTreasuryUpdated(address protocolTreasuryAddress);\\r\\n\\r\\n  /// @notice constructor function which ensure deployer is set as owner\\r\\n  function initialize() external initializer {\\r\\n    __Context_init_unchained();\\r\\n    __Ownable_init_unchained();\\r\\n  }\\r\\n\\r\\n  // --- Core methods ---\\r\\n\\r\\n  /// @notice Set the protocol fee percentage\\r\\n  /// @param _protocolFeePercentage The new protocol fee percentage\\r\\n  function updateProtocolFeePercentage(uint24 _protocolFeePercentage) external onlyOwner {\\r\\n\\r\\n    require(_protocolFeePercentage <= DENOMINATOR , \\\"value exceeds 100%\\\");\\r\\n\\r\\n    protocolFeePercentage = _protocolFeePercentage;\\r\\n    emit ProtocolFeePercentageUpdated(protocolFeePercentage);\\r\\n  }\\r\\n\\r\\n  /// @notice Set the protocol treasury address\\r\\n  /// @param _protocolTreasury The new protocol treasury address\\r\\n  function updateProtocolTreasury(address payable _protocolTreasury) external onlyOwner {\\r\\n    protocolTreasury = _protocolTreasury;\\r\\n    emit ProtocolTreasuryUpdated(protocolTreasury);\\r\\n  }\\r\\n\\r\\n}\",\"keccak256\":\"0x8d36edb76a3c096597029b2e96a112fb66e629e67f13d7d35f6ea14fa7607077\",\"license\":\"AGPL-3.0-only\"},\"contracts/utils/MetaPtr.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nstruct MetaPtr {\\r\\n\\r\\n  /// @notice Protocol ID corresponding to a specific protocol.\\r\\n  /// More info at https://github.com/allo-protocol/contracts/tree/main/docs/MetaPtrProtocol.md\\r\\n  uint256 protocol;\\r\\n  \\r\\n  /// @notice Pointer to fetch metadata for the specified protocol\\r\\n  string pointer;\\r\\n}\",\"keccak256\":\"0x0c0282e30607fcfddcd64564c27a57f06453a110262c9d986b171d0ddffbc2ca\",\"license\":\"AGPL-3.0-only\"},\"contracts/votingStrategy/IVotingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice Defines the abstract contract for voting algorithms on grants\\r\\n * within a round. Any new voting algorithm would be expected to\\r\\n * extend this abstract contract.\\r\\n * Every IVotingStrategy contract would be unique to RoundImplementation\\r\\n * and would be deployed before creating a round\\r\\n */\\r\\nabstract contract IVotingStrategy {\\r\\n\\r\\n   // --- Data ---\\r\\n\\r\\n  /// @notice Round address\\r\\n  address public roundAddress;\\r\\n\\r\\n\\r\\n  // --- Modifier ---\\r\\n\\r\\n  /// @notice modifier to check if sender is round contract.\\r\\n  modifier isRoundContract() {\\r\\n    require(roundAddress != address(0), \\\"error: voting contract not linked to a round\\\");\\r\\n    require(msg.sender == roundAddress, \\\"error: can be invoked only by round contract\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n\\r\\n  // --- Core methods ---\\r\\n\\r\\n  /**\\r\\n   * @notice Invoked by RoundImplementation on creation to\\r\\n   * set the round for which the voting contracts is to be used\\r\\n   *\\r\\n   */\\r\\n  function init() external virtual {\\r\\n    require(roundAddress == address(0), \\\"init: roundAddress already set\\\");\\r\\n    roundAddress = msg.sender;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Invoked by RoundImplementation to allow voter to case\\r\\n   * vote for grants during a round.\\r\\n   *\\r\\n   * @dev\\r\\n   * - allows contributor to do cast multiple votes which could be weighted.\\r\\n   * - should be invoked by RoundImplementation contract\\r\\n   * - ideally IVotingStrategy implementation should emit events after a vote is cast\\r\\n   * - this would be triggered when a voter casts their vote via grant explorer\\r\\n   *\\r\\n   * @param _encodedVotes encoded votes\\r\\n   * @param _voterAddress voter address\\r\\n   */\\r\\n  function vote(bytes[] calldata _encodedVotes, address _voterAddress) external virtual payable;\\r\\n}\\r\\n\",\"keccak256\":\"0x27299cc4f01d58c6215be344f4b374164199032fac4da2a651fdb6f2e3d12009\",\"license\":\"AGPL-3.0-only\"},\"contracts/votingStrategy/IVotingStrategyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IVotingStrategyFactory {\\r\\n    function initialize() external;\\r\\n\\r\\n    function updateVotingContract(\\r\\n        address newVotingContract\\r\\n    ) external;\\r\\n\\r\\n    function create() external returns (address);\\r\\n}\",\"keccak256\":\"0x391e71407a2bf5785f05c04124e5e55fe5ac0ad2023a2fda2df4f0b76ecfcf40\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80638129fc1c1161008a578063e1c7392a11610059578063e1c7392a1461026c578063fd1a96a814610281578063fe169f7614610294578063ffa1ad741461029c57600080fd5b80638129fc1c146101f45780639d76ea5814610209578063b5ba9d3314610229578063d97f3dcf1461024a57600080fd5b80632eb4a7ab116100c65780632eb4a7ab1461017a5780635f1b55f31461019e57806368742da6146101be578063767f0652146101d157600080fd5b80630b36106b146100f85780630b67d9251461011a5780632d52eff21461015757600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50610118610113366004611461565b6102da565b005b34801561012657600080fd5b5060005461013a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016357600080fd5b5060025415155b604051901515815260200161014e565b34801561018657600080fd5b5061019060025481565b60405190815260200161014e565b3480156101aa57600080fd5b5061016a6101b93660046114d3565b6104ee565b6101186101cc366004611501565b61052f565b3480156101dd57600080fd5b506101e66106f5565b60405161014e92919061156e565b34801561020057600080fd5b5061011861078c565b34801561021557600080fd5b5060015461013a906001600160a01b031681565b34801561023557600080fd5b5060015461016a90600160a01b900460ff1681565b34801561025657600080fd5b50610190600080516020611add83398151915281565b34801561027857600080fd5b506101186108ac565b61011861028f366004611587565b61099b565b610118610b0b565b3480156102a857600080fd5b506102cd604051806040016040528060058152602001640302e322e360dc1b81525081565b60405161014e91906115ea565b60008060009054906101000a90046001600160a01b03166001600160a01b031663e40205d66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561032e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035291906115fd565b905080421161037c5760405162461bcd60e51b815260040161037390611616565b60405180910390fd5b600054604051632474521560e21b8152600080516020611add83398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156103d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fc9190611643565b6104185760405162461bcd60e51b815260040161037390611665565b600154600160a01b900460ff16156104725760405162461bcd60e51b815260206004820181905260248201527f5061796f75743a20416c726561647920726561647920666f72207061796f75746044820152606401610373565b60008061048184860186611701565b600282905580516004908155602082015192945090925082916005906104a7908261185c565b509050507fdc7180ca4affc84269428ed20ef950e745126f11691b010c4a7d49458421008f60025460046040516104df92919061191c565b60405180910390a15050505050565b6000806104fd610100846119d7565b9050600061050d610100856119eb565b60009283526003602052604090922054600190921b9182169091149392505050565b600054604051632474521560e21b8152600080516020611add83398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa15801561058b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105af9190611643565b6105cb5760405162461bcd60e51b815260040161037390611665565b60008060009054906101000a90046001600160a01b03166001600160a01b031663e40205d66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064391906115fd565b90508042116106645760405162461bcd60e51b815260040161037390611616565b600061066e610d24565b6001549091506001600160a01b03166106905761068b8382610dad565b6106a7565b6001546106a7906001600160a01b03168483610ecb565b600154604080518381526001600160a01b038681166020830152909216917fe9171aeff46c37ab955b8aff908e14ae9732bd06634fa131226cfe5c25bfd2fb910160405180910390a2505050565b6004805460058054919291610709906117d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610735906117d4565b80156107825780601f1061075757610100808354040283529160200191610782565b820191906000526020600020905b81548152906001019060200180831161076557829003601f168201915b5050505050905082565b600154600160b01b900460ff16158080156107b2575060018054600160a81b900460ff16105b806107d25750303b1580156107d2575060018054600160a81b900460ff16145b6108355760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610373565b6001805460ff60a81b1916600160a81b1790558015610862576001805460ff60b01b1916600160b01b1790555b80156108a9576001805460ff60b01b191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6000546001600160a01b0316156109055760405162461bcd60e51b815260206004820152601860248201527f726f756e644164647265737320616c72656164792073657400000000000000006044820152606401610373565b600080546001600160a01b0319163390811790915560408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa158015610955573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097991906119ff565b600180546001600160a81b0319166001600160a01b0392909216919091179055565b600054604051632474521560e21b8152600080516020611add83398151915260048201523360248201526001600160a01b03909116906391d1485490604401602060405180830381865afa1580156109f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1b9190611643565b610a375760405162461bcd60e51b815260040161037390611665565b60018054600160a01b900460ff16151514610a945760405162461bcd60e51b815260206004820152601c60248201527f5061796f75743a204e6f7420726561647920666f72207061796f7574000000006044820152606401610373565b60005b81811015610adb57610acb838383818110610ab457610ab4611a1c565b9050602002810190610ac69190611a32565b610f1d565b610ad481611a52565b9050610a97565b5060405133907f7ec3272052827f7b50d9e84f98172cbb80c112df1e377c5b97ea77f1812db8d990600090a25050565b6000546001600160a01b0316610b5b5760405162461bcd60e51b81526020600482015260156024820152741b9bdd081b1a5b9ad959081d1bc818481c9bdd5b99605a1b6044820152606401610373565b6000546001600160a01b03163314610bac5760405162461bcd60e51b81526020600482015260146024820152731b9bdd081a5b9d9bdad95908189e481c9bdd5b9960621b6044820152606401610373565b60008060009054906101000a90046001600160a01b03166001600160a01b031663e40205d66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2491906115fd565b9050804211610c455760405162461bcd60e51b815260040161037390611616565b600154600160a01b900460ff1615610c9f5760405162461bcd60e51b815260206004820152601c60248201527f69735265616479466f725061796f757420616c726561647920736574000000006044820152606401610373565b600254610ce55760405162461bcd60e51b8152602060048201526014602482015273191a5cdd1c9a589d5d1a5bdb881b9bdd081cd95d60621b6044820152606401610373565b6001805460ff60a01b1916600160a01b1790556040517f7b9d6265b7710fe1b51f9f051045998fcb310de76ab8f2cbb2e7d571d079254c90600090a150565b6001546000906001600160a01b0316610d3c57504790565b6001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da891906115fd565b905090565b80471015610dfd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610373565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610e4a576040519150601f19603f3d011682016040523d82523d6000602084013e610e4f565b606091505b5050905080610ec65760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610373565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610ec69084906110f4565b80356000610f316040840160208501611501565b9050604083013560808401356000610f4c6060870187611a79565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929350610f8c92508791506104ee9050565b15610fd95760405162461bcd60e51b815260206004820152601b60248201527f5061796f75743a20416c726561647920646973747269627574656400000000006044820152606401610373565b60408051602081018790526001600160a01b03861691810191909152606081018490526080810183905260009060a00160408051601f198184030181528282528051602091820120908301520160405160208183030381529060405280519060200120905061104b82600254836111c9565b61108f5760405162461bcd60e51b81526020600482015260156024820152742830bcb7baba1d1024b73b30b634b210383937b7b360591b6044820152606401610373565b611098866111df565b6110a2858561121d565b600154604080518681526001600160a01b038881166020830152869316917f7a0b32f604a8c94326322861039a44b7ed78624cf220ba8b586a2447af0d9c9b910160405180910390a350505050505050565b6000611149826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112529092919063ffffffff16565b905080516000148061116a57508080602001905181019061116a9190611643565b610ec65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610373565b6000826111d68584611269565b14949350505050565b60006111ed610100836119d7565b905060006111fd610100846119eb565b6000928352600360205260409092208054600190931b9092179091555050565b6001546001600160a01b031661123b576112378282610dad565b5050565b600154611237906001600160a01b03168383610ecb565b606061126184846000856112b6565b949350505050565b600081815b84518110156112ae5761129a8286838151811061128d5761128d611a1c565b6020026020010151611391565b9150806112a681611a52565b91505061126e565b509392505050565b6060824710156113175760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610373565b600080866001600160a01b031685876040516113339190611aca565b60006040518083038185875af1925050503d8060008114611370576040519150601f19603f3d011682016040523d82523d6000602084013e611375565b606091505b5091509150611386878383876113c3565b979650505050505050565b60008183106113ad5760008281526020849052604090206113bc565b60008381526020839052604090205b9392505050565b6060831561143257825160000361142b576001600160a01b0385163b61142b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610373565b5081611261565b61126183838151156114475781518083602001fd5b8060405162461bcd60e51b815260040161037391906115ea565b6000806020838503121561147457600080fd5b823567ffffffffffffffff8082111561148c57600080fd5b818501915085601f8301126114a057600080fd5b8135818111156114af57600080fd5b8660208285010111156114c157600080fd5b60209290920196919550909350505050565b6000602082840312156114e557600080fd5b5035919050565b6001600160a01b03811681146108a957600080fd5b60006020828403121561151357600080fd5b81356113bc816114ec565b60005b83811015611539578181015183820152602001611521565b50506000910152565b6000815180845261155a81602086016020860161151e565b601f01601f19169290920160200192915050565b8281526040602082015260006112616040830184611542565b6000806020838503121561159a57600080fd5b823567ffffffffffffffff808211156115b257600080fd5b818501915085601f8301126115c657600080fd5b8135818111156115d557600080fd5b8660208260051b85010111156114c157600080fd5b6020815260006113bc6020830184611542565b60006020828403121561160f57600080fd5b5051919050565b6020808252601390820152721c9bdd5b99081a185cc81b9bdd08195b991959606a1b604082015260600190565b60006020828403121561165557600080fd5b815180151581146113bc57600080fd5b6020808252601290820152713737ba103937bab7321037b832b930ba37b960711b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156116ca576116ca611691565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156116f9576116f9611691565b604052919050565b6000806040838503121561171457600080fd5b8235915060208084013567ffffffffffffffff8082111561173457600080fd5b908501906040828803121561174857600080fd5b6117506116a7565b82358152838301358281111561176557600080fd5b80840193505087601f84011261177a57600080fd5b82358281111561178c5761178c611691565b61179e601f8201601f191686016116d0565b925080835288858286010111156117b457600080fd5b808585018685013760009083018501529283015250919491935090915050565b600181811c908216806117e857607f821691505b60208210810361180857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610ec657600081815260208120601f850160051c810160208610156118355750805b601f850160051c820191505b8181101561185457828155600101611841565b505050505050565b815167ffffffffffffffff81111561187657611876611691565b61188a8161188484546117d4565b8461180e565b602080601f8311600181146118bf57600084156118a75750858301515b600019600386901b1c1916600185901b178555611854565b600085815260208120601f198616915b828110156118ee578886015182559484019460019091019084016118cf565b508582101561190c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b828152600060206040818401528354604084015260018085016040606086015260008154611949816117d4565b80608089015260a0858316600081146119695760018114611983576119b1565b60ff1984168a83015282151560051b8a01820194506119b1565b856000528760002060005b848110156119a95781548c820185015290880190890161198e565b8b0183019550505b50929a9950505050505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826119e6576119e66119c1565b500490565b6000826119fa576119fa6119c1565b500690565b600060208284031215611a1157600080fd5b81516113bc816114ec565b634e487b7160e01b600052603260045260246000fd5b60008235609e19833603018112611a4857600080fd5b9190910192915050565b600060018201611a7257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000808335601e19843603018112611a9057600080fd5b83018035915067ffffffffffffffff821115611aab57600080fd5b6020019150600581901b3603821315611ac357600080fd5b9250929050565b60008251611a4881846020870161151e56feec61da14b5abbac5c5fda6f1d57642a264ebd5d0674f35852829746dfb8174a5a264697066735822122005e2255f30048faf55cc6a68fe5d2b3e4bd43d15689f61a87bd3113b211e56fe64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "hasBeenDistributed(uint256)": {
        "params": {
          "_index": "index of the distribution"
        }
      },
      "payout((uint256,address,uint256,bytes32[],bytes32)[])": {
        "details": "can be invoked only by round operator",
        "params": {
          "_distributions": "encoded distribution"
        }
      },
      "updateDistribution(bytes)": {
        "params": {
          "encodedDistribution": "encoded distribution"
        }
      },
      "withdrawFunds(address)": {
        "params": {
          "withdrawAddress": "withdraw funds address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BatchPayoutSuccessful(address)": {
        "notice": "Emitted when batch payout is successful"
      },
      "DistributionUpdated(bytes32,(uint256,string))": {
        "notice": "Emitted when the distribution is updated"
      },
      "FundsDistributed(uint256,address,address,bytes32)": {
        "notice": "Emitted when funds are distributed"
      },
      "FundsWithdrawn(address,uint256,address)": {
        "notice": "Emitted when funds are withdrawn from the payout contract"
      },
      "ReadyForPayout()": {
        "notice": "Emitted when contract is ready for payout"
      }
    },
    "kind": "user",
    "methods": {
      "ROUND_OPERATOR_ROLE()": {
        "notice": "round operator role"
      },
      "distributionMetaPtr()": {
        "notice": "MetaPtr containing the distribution"
      },
      "hasBeenDistributed(uint256)": {
        "notice": "Util function to check if distribution is done"
      },
      "init()": {
        "notice": "Invoked by RoundImplementation on creation to set the round for which the payout strategy is to be used"
      },
      "isDistributionSet()": {
        "notice": "function to check if distribution is set"
      },
      "merkleRoot()": {
        "notice": "merkle root generated from distribution"
      },
      "payout((uint256,address,uint256,bytes32[],bytes32)[])": {
        "notice": "function to distribute funds to recipient"
      },
      "roundAddress()": {
        "notice": "RoundImplementation address"
      },
      "setReadyForPayout()": {
        "notice": "Invoked by RoundImplementation to set isReadyForPayout"
      },
      "tokenAddress()": {
        "notice": "Token address"
      },
      "updateDistribution(bytes)": {
        "notice": "Invoked by round operator to update the merkle root and distribution MetaPtr"
      },
      "withdrawFunds(address)": {
        "notice": "Invoked by RoundImplementation to withdraw funds to withdrawAddress from the payout contract"
      }
    },
    "notice": "Merkle Payout Strategy contract which is deployed once per round and is used to upload the final match distribution.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8205,
        "contract": "contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol:MerklePayoutStrategyImplementation",
        "label": "roundAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address_payable"
      },
      {
        "astId": 8208,
        "contract": "contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol:MerklePayoutStrategyImplementation",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8210,
        "contract": "contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol:MerklePayoutStrategyImplementation",
        "label": "isReadyForPayout",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 800,
        "contract": "contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol:MerklePayoutStrategyImplementation",
        "label": "_initialized",
        "offset": 21,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 803,
        "contract": "contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol:MerklePayoutStrategyImplementation",
        "label": "_initializing",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 8483,
        "contract": "contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol:MerklePayoutStrategyImplementation",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 8488,
        "contract": "contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol:MerklePayoutStrategyImplementation",
        "label": "distributedBitMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8492,
        "contract": "contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol:MerklePayoutStrategyImplementation",
        "label": "distributionMetaPtr",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(MetaPtr)11239_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MetaPtr)11239_storage": {
        "encoding": "inplace",
        "label": "struct MetaPtr",
        "members": [
          {
            "astId": 11235,
            "contract": "contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol:MerklePayoutStrategyImplementation",
            "label": "protocol",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11238,
            "contract": "contracts/payoutStrategy/Merkle/MerklePayoutStrategyImplementation.sol:MerklePayoutStrategyImplementation",
            "label": "pointer",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}